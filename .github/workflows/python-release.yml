name: Python Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  verify-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.14"

      - name: Verify tag matches package version
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          # Extract version from pyproject.toml
          PACKAGE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('python/pyproject.toml', 'rb'))['project']['version'])")
          echo "Tag version: ${TAG_VERSION}"
          echo "Package version: ${PACKAGE_VERSION}"
          if [ "${TAG_VERSION}" != "${PACKAGE_VERSION}" ]; then
            echo "::error::Tag version (${TAG_VERSION}) must match package version (${PACKAGE_VERSION})"
            exit 1
          fi

  build:
    needs: verify-version
    name: Build ${{ matrix.os }}-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64
          - os: ubuntu-latest
            target: aarch64
          # macOS - use specific runners to avoid cross-compilation issues
          - os: macos-13 # Intel
            target: x86_64
          - os: macos-14 # Apple Silicon
            target: aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build wheels
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380 # v1.49.4
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path ../crates/nblm-python/Cargo.toml
          sccache: "true"
          manylinux: auto
          working-directory: python
          # Forward CFLAGS so ring's ARM assembly sees __ARM_ARCH when cross-compiling
          docker-options: >-
            -v ${{ github.workspace }}/crates:/crates
            ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64' && '-e CFLAGS_aarch64_unknown_linux_gnu=-D__ARM_ARCH=8 -e CFLAGS_aarch64-unknown-linux-gnu=-D__ARM_ARCH=8' || '' }}

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}
          path: python/dist

  build-sdist:
    needs: verify-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build sdist
        uses: PyO3/maturin-action@86b9d133d34bc1b40018696f782949dac11bd380 # v1.49.4
        with:
          command: sdist
          args: --out dist
          working-directory: python
          # sdist always runs on Linux, so always pass the ARM CFLAGS override
          docker-options: >-
            -v ${{ github.workspace }}/crates:/crates
            -e CFLAGS_aarch64_unknown_linux_gnu=-D__ARM_ARCH=8
            -e CFLAGS_aarch64-unknown-linux-gnu=-D__ARM_ARCH=8

      - name: Upload sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sdist
          path: python/dist

  release:
    needs: [build, build-sdist]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: artifacts
          merge-multiple: true

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          files: artifacts/*
          generate_release_notes: true
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
