{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nblm-rs Documentation","text":"<p>Complete documentation for the NotebookLM Enterprise API client (CLI &amp; Python SDK).</p> <p>Unofficial Project</p> <p>This project is not affiliated with, sponsored, or endorsed by Google. nblm-rs is an independent, unofficial tool. It is provided \"as is\" without any warranty.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to nblm-rs? Start here:</p> <ul> <li>Installation - Install CLI or Python SDK</li> <li>Authentication - Set up authentication with gcloud</li> <li>Configuration - Project numbers, locations, environment variables</li> </ul>"},{"location":"#features","title":"Features","text":"<p>API Status</p> <p>The NotebookLM API is currently in alpha. Some features may not work as documented due to API limitations. See API Limitations for details.</p>"},{"location":"#notebooks","title":"Notebooks","text":"Feature CLI Python Status Notes Create notebook \u2705 \u2705 Working List recent notebooks \u2705 \u2705 Working Pagination not implemented by API Delete notebook(s) \u2705 \u2705 Working Sequential deletion (API limitation)"},{"location":"#sources","title":"Sources","text":"Feature CLI Python Status Notes Add web URL \u2705 \u2705 Working Add text content \u2705 \u2705 Working Add video (YouTube) \u2705 \u2705 Working Uses <code>youtubeUrl</code> field Add Google Drive \u2705 \u2705 Working Requires Drive-enabled auth Upload file \u2705 \u2705 Working Delete source(s) \u2705 \u2705 Working Get source by ID \u2705 \u2705 Working"},{"location":"#audio-overview","title":"Audio Overview","text":"Feature CLI Python Status Notes Create audio overview \u2705 \u2705 Working Config fields not supported Delete audio overview \u2705 \u2705 Working"},{"location":"#sharing","title":"Sharing","text":"Feature CLI Python Status Notes Share notebook \u2705 \u274c Untested Requires additional users"},{"location":"#cli-reference","title":"CLI Reference","text":"<p>Complete command-line interface documentation:</p> <ul> <li>CLI Overview - Command structure and common options</li> <li>Notebooks Commands - Create, list, and delete notebooks</li> <li>Sources Commands - Add, upload, and manage sources</li> <li>Audio Commands - Create and delete audio overviews</li> <li>Share Commands - Share notebooks with users</li> <li>Doctor Command - Run environment diagnostics</li> </ul>"},{"location":"#python-sdk-reference","title":"Python SDK Reference","text":"<p>Python bindings documentation:</p> <ul> <li>Python SDK Overview - Installation and basic usage</li> <li>Quickstart - Get started in 5 minutes</li> <li>API Reference - All classes and methods</li> <li>Source Management - Source operations in detail</li> <li>Notebooks API - Notebook operations in detail</li> <li>Audio API - Audio overview operations</li> <li>Error Handling - Exception handling patterns</li> </ul>"},{"location":"#rust-sdk","title":"Rust SDK","text":"<p>Rust library documentation:</p> <ul> <li>Getting Started - Rust SDK setup and usage</li> </ul> <p>Work in Progress</p> <p>The Rust SDK is currently being refactored. The Getting Started guide will be updated once the new core APIs are finalized.</p>"},{"location":"#guides","title":"Guides","text":"<p>Additional guides and tutorials:</p> <ul> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#api-information","title":"API Information","text":"<ul> <li>API Limitations - Known limitations and workarounds</li> <li>NotebookLM API Documentation - Official API docs</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Contributing Guide - Development setup and guidelines</li> </ul> <p>Note</p> <p>The <code>investigation/</code> directory contains internal research notes and experiments with the NotebookLM API.</p>"},{"location":"api/limitations/","title":"NotebookLM API Known Limitations","text":"<p>This document tracks verified API limitations and workarounds implemented in nblm-rs.</p> <p>Last Updated</p> <p>2025-10-31</p>"},{"location":"api/limitations/#batch-delete-notebooks","title":"Batch Delete Notebooks","text":"<p>Discovered: 2025-10-19 Status: Confirmed API limitation</p>"},{"location":"api/limitations/#issue","title":"Issue","text":"<p>The <code>batchDeleteNotebooks</code> API endpoint accepts an array of notebook names in the request body, but only successfully processes a single notebook at a time. Attempting to delete multiple notebooks in one request results in HTTP 400 error.</p> <p>API Endpoint: <code>POST /v1alpha1/projects/{project}/locations/{location}/notebooks:batchDelete</code></p> <p>Request Format:</p> <pre><code>{\n  \"names\": [\n    \"projects/123/locations/global/notebooks/abc\",\n    \"projects/123/locations/global/notebooks/def\"\n  ]\n}\n</code></pre> <p>Behavior:</p> <ul> <li>\u2713 Works: Array with 1 element</li> <li>\u2717 Fails: Array with 2+ elements (HTTP 400)</li> </ul>"},{"location":"api/limitations/#workaround","title":"Workaround","text":"<p>nblm-rs implements sequential deletion:</p> <pre><code>pub async fn delete_notebooks(&amp;self, notebook_names: Vec&lt;String&gt;) -&gt; Result&lt;...&gt; {\n    for name in &amp;notebook_names {\n        let request = BatchDeleteNotebooksRequest {\n            names: vec![name.clone()],  // Single item only\n        };\n        self.batch_delete_notebooks(request).await?;\n    }\n    Ok(...)\n}\n</code></pre>"},{"location":"api/limitations/#impact","title":"Impact","text":"<ul> <li>Multiple deletions take longer (sequential API calls)</li> <li>Cannot leverage true batch operation benefits</li> <li>Retry logic applies to each individual deletion</li> </ul>"},{"location":"api/limitations/#pagination-not-implemented","title":"Pagination Not Implemented","text":"<p>Discovered: 2025-10-19 (per README) Status: Confirmed API limitation</p>"},{"location":"api/limitations/#issue_1","title":"Issue","text":"<p>The <code>listRecentlyViewed</code> API accepts <code>pageSize</code> and <code>pageToken</code> parameters but never returns <code>nextPageToken</code> in responses, indicating pagination is not currently implemented.</p> <p>API Endpoint: <code>GET /v1alpha1/projects/{project}/locations/{location}/notebooks:listRecentlyViewed</code></p>"},{"location":"api/limitations/#behavior","title":"Behavior","text":"<ul> <li><code>pageSize</code> parameter is accepted but may not be honored</li> <li><code>nextPageToken</code> is never returned in responses</li> <li>All accessible notebooks appear to be returned in single response</li> </ul>"},{"location":"api/limitations/#workaround_1","title":"Workaround","text":"<p>None needed. The API returns all results in one call.</p>"},{"location":"api/limitations/#impact_1","title":"Impact","text":"<ul> <li>Cannot paginate through large notebook lists</li> <li>May cause performance issues with very large notebook collections (untested)</li> </ul>"},{"location":"api/limitations/#audio-overview-configuration-fields-not-supported","title":"Audio Overview Configuration Fields Not Supported","text":"<p>Discovered: 2025-10-19 (per README) Status: Confirmed API limitation</p>"},{"location":"api/limitations/#issue_2","title":"Issue","text":"<p>API documentation mentions configuration fields (<code>languageCode</code>, <code>sourceIds</code>, <code>episodeFocus</code>), but the API rejects all of these fields with \"Unknown name\" errors. Only empty request body <code>{}</code> is accepted.</p> <p>API Endpoint: <code>POST /v1alpha1/.../audioOverviews</code></p>"},{"location":"api/limitations/#behavior_1","title":"Behavior","text":"<p>Documented (but rejected):</p> <pre><code>{\n  \"languageCode\": \"en\",\n  \"sourceIds\": [...],\n  \"episodeFocus\": \"...\"\n}\n</code></pre> <p>Actually accepted:</p> <pre><code>{}\n</code></pre>"},{"location":"api/limitations/#workaround_2","title":"Workaround","text":"<p>Create audio overview with empty request, then configure settings through NotebookLM web UI.</p>"},{"location":"cli/","title":"CLI Overview","text":"<p>Command-line interface for the NotebookLM Enterprise API.</p>"},{"location":"cli/#command-structure","title":"Command Structure","text":"<pre><code>nblm [GLOBAL_OPTIONS] &lt;COMMAND&gt; [COMMAND_OPTIONS]\n</code></pre>"},{"location":"cli/#global-options","title":"Global Options","text":"<p>Options that can be used with any command:</p> Option Description Required Default <code>--auth &lt;METHOD&gt;</code> Authentication method: <code>gcloud</code> or <code>env</code> Yes - <code>--project-number &lt;NUMBER&gt;</code> Google Cloud project number Yes* From env <code>--location &lt;LOCATION&gt;</code> API location: <code>global</code>, <code>us</code>, or <code>eu</code> No <code>global</code> <code>--endpoint-location &lt;LOCATION&gt;</code> Endpoint location (must match <code>--location</code>) No <code>global</code> <code>--json</code> Output in JSON format No false <code>--debug-http</code> Print raw HTTP responses to stderr No false <code>-h, --help</code> Print help information No - <code>-V, --version</code> Print version information No - <p>*Can be set via <code>NBLM_PROJECT_NUMBER</code> environment variable.</p>"},{"location":"cli/#commands","title":"Commands","text":"Command Description Documentation <code>doctor</code> Run environment diagnostics doctor.md <code>notebooks</code> Manage notebooks notebooks.md <code>sources</code> Manage notebook sources sources.md <code>audio</code> Manage audio overviews audio.md <code>share</code> Share notebooks with users share.md"},{"location":"cli/#authentication","title":"Authentication","text":"<p>Two authentication methods are supported:</p>"},{"location":"cli/#gcloud-cli-recommended","title":"gcloud CLI (Recommended)","text":"<pre><code>gcloud auth login\nnblm --auth gcloud notebooks recent\n# or let environment variables fill in project details\nnblm --auth gcloud --project-number \"$NBLM_PROJECT_NUMBER\" notebooks recent\n</code></pre>"},{"location":"cli/#environment-variable","title":"Environment Variable","text":"<pre><code>export NBLM_ACCESS_TOKEN=$(gcloud auth print-access-token)\nnblm --auth env notebooks recent\n</code></pre> <p>See Authentication Guide for details.</p>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>Reduce command verbosity by setting environment variables:</p> <pre><code>export NBLM_PROJECT_NUMBER=\"123456789012\"\nexport NBLM_LOCATION=\"global\"\nexport NBLM_ENDPOINT_LOCATION=\"global\"\n\n# Now you can omit these flags\nnblm notebooks recent\n</code></pre>"},{"location":"cli/#raw-http-logging","title":"Raw HTTP Logging","text":"<p>Use the new <code>--debug-http</code> flag (or set <code>NBLM_DEBUG_HTTP=1</code>) to print the raw JSON payload returned by the API. Logged bodies may contain sensitive data, so enable this only on trusted machines.</p>"},{"location":"cli/#output-formats","title":"Output Formats","text":""},{"location":"cli/#human-readable-default","title":"Human-Readable (Default)","text":"<pre><code>nblm notebooks recent\n</code></pre> <p>Output:</p> <pre><code>Title: My Notebook\nNotebook ID: abc123\nUpdated: 2025-10-25T10:30:00Z\n</code></pre>"},{"location":"cli/#json-format","title":"JSON Format","text":"<pre><code>nblm --json notebooks recent\n</code></pre> <p>Output:</p> <pre><code>{\n  \"notebooks\": [\n    {\n      \"title\": \"My Notebook\",\n      \"notebookId\": \"abc123\",\n      \"updateTime\": \"2025-10-25T10:30:00Z\"\n    }\n  ]\n}\n</code></pre> <p>The <code>--json</code> flag can be placed anywhere in the command:</p> <pre><code># All equivalent\nnblm --json notebooks recent\nnblm notebooks recent --json\n</code></pre>"},{"location":"cli/#error-handling","title":"Error Handling","text":""},{"location":"cli/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 General error 2 Authentication error"},{"location":"cli/#automatic-retries","title":"Automatic Retries","text":"<p>The CLI automatically retries transient failures (HTTP 429, 500, 502, 503, 504) with exponential backoff.</p>"},{"location":"cli/#error-messages","title":"Error Messages","text":"<p>Errors are printed to stderr in a human-readable format:</p> <pre><code>Error: Failed to create notebook\nCause: API returned 403 Forbidden\n</code></pre> <p>In JSON mode, errors are also in JSON format:</p> <pre><code>{\n  \"error\": \"Failed to create notebook\",\n  \"cause\": \"API returned 403 Forbidden\"\n}\n</code></pre>"},{"location":"cli/#getting-help","title":"Getting Help","text":""},{"location":"cli/#general-help","title":"General Help","text":"<pre><code>nblm --help\n</code></pre>"},{"location":"cli/#command-specific-help","title":"Command-Specific Help","text":"<pre><code>nblm notebooks --help\nnblm sources add --help\n</code></pre>"},{"location":"cli/#examples","title":"Examples","text":""},{"location":"cli/#quick-start","title":"Quick Start","text":"<pre><code># Set up\nexport NBLM_PROJECT_NUMBER=\"123456789012\"\ngcloud auth login\n\n# Create notebook\nnblm notebooks create --title \"My Notebook\"\n\n# List notebooks\nnblm notebooks recent\n\n# Add source\nnblm sources add \\\n  --notebook-id abc123 \\\n  --web-url \"https://example.com\"\n</code></pre>"},{"location":"cli/#json-output-with-jq","title":"JSON Output with jq","text":"<pre><code># Get all notebook titles\nnblm --json notebooks recent | jq '.notebooks[].title'\n\n# Get first notebook ID\nnblm --json notebooks recent | jq -r '.notebooks[0].notebookId'\n\n# Count notebooks\nnblm --json notebooks recent | jq '.notebooks | length'\n</code></pre>"},{"location":"cli/#next-steps","title":"Next Steps","text":"<ul> <li>Notebooks Commands - Notebook management</li> <li>Sources Commands - Source management</li> <li>Audio Commands - Audio overview operations</li> </ul>"},{"location":"cli/audio/","title":"Audio Commands","text":"<p>Manage audio overviews (podcast-style discussions) for notebooks.</p>"},{"location":"cli/audio/#available-commands","title":"Available Commands","text":"Command Description <code>create</code> Create an audio overview <code>delete</code> Delete an audio overview"},{"location":"cli/audio/#create","title":"create","text":"<p>Create an audio overview from a notebook's sources.</p>"},{"location":"cli/audio/#usage","title":"Usage","text":"<pre><code>nblm audio create --notebook-id &lt;ID&gt;\n</code></pre>"},{"location":"cli/audio/#options","title":"Options","text":"Option Description Required <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes"},{"location":"cli/audio/#examples","title":"Examples","text":"<p>Create audio overview:</p> <pre><code>nblm audio create --notebook-id abc123\n</code></pre> <p>JSON output:</p> <pre><code>nblm --json audio create --notebook-id abc123\n</code></pre> <p>Output:</p> <pre><code>{\n  \"audioOverviewId\": \"audio-abc123\",\n  \"name\": \"projects/123456789012/locations/global/notebooks/abc123/audioOverviews/audio-abc123\",\n  \"status\": \"AUDIO_OVERVIEW_STATUS_IN_PROGRESS\"\n}\n</code></pre> <p>Audio Overview Requirements</p> <ul> <li>The notebook must have at least one source before creating an audio overview</li> <li>Audio generation takes several minutes to complete</li> <li>Only one audio overview can exist per notebook</li> <li>Configuration options are not supported: Despite API documentation mentioning <code>languageCode</code>, <code>sourceIds</code>, and <code>episodeFocus</code> fields, the API only accepts an empty request body (as of 2025-10-25)</li> <li>Language and other settings must be configured through the NotebookLM web UI</li> </ul>"},{"location":"cli/audio/#processing-status","title":"Processing Status","text":"<p>Status Checking Limitation</p> <p>As of now, there is no API to retrieve audio overview status. You must check the NotebookLM web UI in your browser to see when audio generation is complete or if it has failed.</p> <p>When creating an audio overview, the initial status is:</p> <ul> <li>AUDIO_OVERVIEW_STATUS_IN_PROGRESS - Audio is being generated</li> </ul> <p>The API only returns this initial status. To check if generation has completed or failed, you must use the NotebookLM web UI.</p>"},{"location":"cli/audio/#delete","title":"delete","text":"<p>Delete the audio overview from a notebook.</p>"},{"location":"cli/audio/#usage_1","title":"Usage","text":"<pre><code>nblm audio delete --notebook-id &lt;ID&gt;\n</code></pre>"},{"location":"cli/audio/#options_1","title":"Options","text":"Option Description Required <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes"},{"location":"cli/audio/#examples_1","title":"Examples","text":"<p>Delete audio overview:</p> <pre><code>nblm audio delete --notebook-id abc123\n</code></pre> <p>JSON output:</p> <pre><code>nblm --json audio delete --notebook-id abc123\n</code></pre> <p>Output:</p> <pre><code>{}\n</code></pre> <p>Deletion is Permanent</p> <ul> <li>Deletion is permanent and cannot be undone</li> <li>You can create a new audio overview after deletion</li> <li>The audio file itself is deleted, but the notebook and sources remain</li> </ul>"},{"location":"cli/audio/#common-patterns","title":"Common Patterns","text":""},{"location":"cli/audio/#create-and-wait-for-completion","title":"Create and wait for completion","text":"<pre><code># Create audio overview\nnblm audio create --notebook-id abc123\n\necho \"Audio overview created. Check status in NotebookLM web UI.\"\necho \"Generation typically takes 3-5 minutes.\"\n\n# Note: The CLI does not currently support polling for completion status\n</code></pre>"},{"location":"cli/audio/#recreate-audio-overview","title":"Recreate audio overview","text":"<pre><code>NOTEBOOK_ID=\"abc123\"\n\n# Delete existing audio overview\necho \"Deleting existing audio overview...\"\nnblm audio delete --notebook-id \"$NOTEBOOK_ID\"\n\n# Wait a moment\nsleep 2\n\n# Create new audio overview\necho \"Creating new audio overview...\"\nnblm audio create --notebook-id \"$NOTEBOOK_ID\"\n\necho \"Done. Check NotebookLM web UI for generation status.\"\n</code></pre>"},{"location":"cli/audio/#batch-create-audio-overviews","title":"Batch create audio overviews","text":"<pre><code># Create audio overviews for multiple notebooks\nNOTEBOOKS=(\"abc123\" \"def456\" \"ghi789\")\n\nfor notebook_id in \"${NOTEBOOKS[@]}\"; do\n  echo \"Creating audio overview for notebook: $notebook_id\"\n  nblm audio create --notebook-id \"$notebook_id\"\ndone\n\necho \"All audio overviews created. Check web UI for completion status.\"\n</code></pre>"},{"location":"cli/audio/#error-handling","title":"Error Handling","text":""},{"location":"cli/audio/#common-errors","title":"Common Errors","text":"<p>Notebook has no sources:</p> <pre><code>Error: Failed to create audio overview\nCause: Notebook must have at least one source before creating audio overview\n</code></pre> <p>Audio overview already exists:</p> <pre><code>Error: Failed to create audio overview\nCause: Audio overview already exists for this notebook\nSolution: Delete the existing audio overview first, then create a new one\n</code></pre> <p>Notebook not found:</p> <pre><code>Error: Notebook not found\nCause: The specified notebook does not exist or you don't have access\n</code></pre> <p>Audio overview not found:</p> <pre><code>Error: Audio overview not found\nCause: No audio overview exists for this notebook\n</code></pre>"},{"location":"cli/audio/#api-limitations","title":"API Limitations","text":"<p>Current API Limitations</p> <p>As of 2025-10-25, the audio overview API has the following limitations:</p> <ol> <li>No configuration options: Cannot specify language, source selection, or episode focus via the API</li> <li>No status polling: Cannot check generation status or progress via the CLI</li> <li>One per notebook: Only one audio overview can exist per notebook</li> <li>No download: Audio files cannot be downloaded via the API</li> </ol> <p>These settings must be managed through the NotebookLM web UI.</p>"},{"location":"cli/audio/#workflow","title":"Workflow","text":"<p>The typical workflow for audio overviews:</p> <ol> <li>Create notebook with <code>nblm notebooks create</code></li> <li>Add sources with <code>nblm sources add</code> or <code>nblm sources upload</code></li> <li>Create audio overview with <code>nblm audio create</code></li> <li>Check status in NotebookLM web UI</li> <li>Listen to audio in NotebookLM web UI</li> <li>(Optional) Delete with <code>nblm audio delete</code> if you want to regenerate</li> </ol>"},{"location":"cli/audio/#next-steps","title":"Next Steps","text":"<ul> <li>Notebooks Commands - Create and manage notebooks</li> <li>Sources Commands - Add content to notebooks</li> </ul>"},{"location":"cli/doctor/","title":"Doctor Command","text":"<p>Run NotebookLM CLI diagnostics to verify that your environment is ready before calling other commands.</p>"},{"location":"cli/doctor/#usage","title":"Usage","text":"<pre><code>nblm doctor\n</code></pre> <p>No additional flags are required. Global options such as <code>--project-number</code> are ignored; the command relies on environment variables instead.</p>"},{"location":"cli/doctor/#what-it-checks","title":"What It Checks","text":"<p>The doctor command runs a series of health checks and prints the result of each one with a status marker:</p> Status Meaning <code>[ok]</code> Check passed <code>[warn]</code> Non-blocking issue was detected (command exits with status code <code>1</code>) <code>[error]</code> Blocking issue was detected (command exits with status code <code>2</code>)"},{"location":"cli/doctor/#environment-variables","title":"Environment Variables","text":"Variable Required Passing Condition Failure Result <code>NBLM_PROJECT_NUMBER</code> Yes Variable is set to a non-empty value <code>[error]</code> with export suggestion <code>NBLM_ENDPOINT_LOCATION</code> No Variable is set (defaults to <code>global</code> when missing) <code>[warn]</code> with suggested default <code>NBLM_LOCATION</code> No Variable is set (defaults to <code>global</code> when missing) <code>[warn]</code> with suggested default <code>NBLM_ACCESS_TOKEN</code> No Variable is set to a non-empty value (value hidden) <code>[warn]</code> suggesting token export <p>Values for sensitive variables (such as <code>NBLM_ACCESS_TOKEN</code>) are never printed. You will only see <code>set (value hidden)</code> in the output.</p>"},{"location":"cli/doctor/#google-drive-access","title":"Google Drive Access","text":"<p>If <code>NBLM_ACCESS_TOKEN</code> is set, the doctor command validates that the token includes a Drive scope (<code>drive</code> or <code>drive.file</code>).</p> <ul> <li><code>[ok]</code> \u2014 token includes the required Drive scope</li> <li><code>[warn]</code> \u2014 scope is missing or cannot be confirmed. The command prints:</li> <li>A recommendation to run <code>gcloud auth login --enable-gdrive-access</code></li> <li>The original environment variable remains untouched</li> </ul> <p>You can skip this check by omitting <code>NBLM_ACCESS_TOKEN</code>. This is useful if you never upload Drive files.</p>"},{"location":"cli/doctor/#command-availability","title":"Command Availability","text":"<p>The doctor command currently verifies that the Google Cloud CLI (<code>gcloud</code>) is installed. Missing commands produce warnings with download links.</p>"},{"location":"cli/doctor/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 All checks passed 1 Only warnings were encountered 2 At least one blocking error was found <p>Use the exit code from CI pipelines or shell scripts to block deployments when required variables are missing.</p>"},{"location":"cli/doctor/#example-output","title":"Example Output","text":"<pre><code>Running NotebookLM environment diagnostics...\n\n   [ok] NBLM_PROJECT_NUMBER=123456789012\n   [ok] NBLM_ENDPOINT_LOCATION=global\n   [ok] NBLM_LOCATION=global\n   [ok] NBLM_ACCESS_TOKEN set (value hidden)\n   [ok] NBLM_ACCESS_TOKEN grants Google Drive access\n   [ok] gcloud is installed (Google Cloud SDK 544.0.0)\n\nSummary: All 6 checks passed.\n\nAll critical checks passed. You're ready to use nblm.\n</code></pre> <p>Warnings appear inline when a check fails:</p> <pre><code> [warn] NBLM_ACCESS_TOKEN lacks Google Drive scope\n       Suggestion: Run `gcloud auth login --enable-gdrive-access` and refresh NBLM_ACCESS_TOKEN\n</code></pre>"},{"location":"cli/doctor/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Missing Drive scope: Re-authenticate with <code>gcloud auth login --enable-gdrive-access</code>, then refresh <code>NBLM_ACCESS_TOKEN</code> using <code>gcloud auth print-access-token</code>.</li> <li>Project number missing: Export <code>NBLM_PROJECT_NUMBER</code> or pass <code>--project-number</code> to other CLI commands once the doctor checks succeed.</li> <li>gcloud not found: Install the Google Cloud CLI from https://cloud.google.com/sdk/docs/install.</li> </ul>"},{"location":"cli/notebooks/","title":"Notebooks Commands","text":"<p>Manage NotebookLM notebooks from the command line.</p>"},{"location":"cli/notebooks/#available-commands","title":"Available Commands","text":"Command Description <code>create</code> Create a new notebook <code>recent</code> List recently viewed notebooks <code>delete</code> Delete one or more notebooks"},{"location":"cli/notebooks/#create","title":"create","text":"<p>Create a new notebook with a title.</p>"},{"location":"cli/notebooks/#usage","title":"Usage","text":"<pre><code>nblm notebooks create --title &lt;TITLE&gt;\n</code></pre>"},{"location":"cli/notebooks/#options","title":"Options","text":"Option Description Required <code>--title &lt;TITLE&gt;</code> Notebook title Yes"},{"location":"cli/notebooks/#examples","title":"Examples","text":"<p>Basic usage:</p> <pre><code>nblm notebooks create --title \"My Research Notebook\"\n</code></pre> <p>JSON output:</p> <pre><code>nblm --json notebooks create --title \"Project Documentation\"\n</code></pre> <p>Output:</p> <pre><code>{\n  \"title\": \"Project Documentation\",\n  \"notebookId\": \"abc123def456\",\n  \"name\": \"projects/123456789012/locations/global/notebooks/abc123def456\",\n  \"createTime\": \"2025-10-25T10:30:00Z\",\n  \"updateTime\": \"2025-10-25T10:30:00Z\"\n}\n</code></pre>"},{"location":"cli/notebooks/#notes","title":"Notes","text":"<ul> <li>The notebook is created in your Google Cloud project</li> <li>The <code>notebookId</code> is needed for subsequent operations (adding sources, etc.)</li> <li>Newly created notebooks are empty and have no sources</li> </ul>"},{"location":"cli/notebooks/#recent","title":"recent","text":"<p>List recently viewed notebooks.</p>"},{"location":"cli/notebooks/#usage_1","title":"Usage","text":"<pre><code>nblm notebooks recent [--page-size &lt;SIZE&gt;]\n</code></pre>"},{"location":"cli/notebooks/#options_1","title":"Options","text":"Option Description Required Default <code>--page-size &lt;SIZE&gt;</code> Maximum number of notebooks to return (1-500) No 500"},{"location":"cli/notebooks/#examples_1","title":"Examples","text":"<p>List all recent notebooks:</p> <pre><code>nblm notebooks recent\n</code></pre> <p>Limit results:</p> <pre><code>nblm notebooks recent --page-size 10\n</code></pre> <p>JSON output:</p> <pre><code>nblm --json notebooks recent\n</code></pre> <p>Output:</p> <pre><code>{\n  \"notebooks\": [\n    {\n      \"title\": \"My Research Notebook\",\n      \"notebookId\": \"abc123\",\n      \"name\": \"projects/123456789012/locations/global/notebooks/abc123\",\n      \"createTime\": \"2025-10-20T09:00:00Z\",\n      \"updateTime\": \"2025-10-25T15:30:00Z\"\n    },\n    {\n      \"title\": \"Project Documentation\",\n      \"notebookId\": \"def456\",\n      \"name\": \"projects/123456789012/locations/global/notebooks/def456\",\n      \"createTime\": \"2025-10-25T10:30:00Z\",\n      \"updateTime\": \"2025-10-25T10:30:00Z\"\n    }\n  ]\n}\n</code></pre> <p>Extract specific fields with jq:</p> <pre><code># Get all notebook titles\nnblm --json notebooks recent | jq '.notebooks[].title'\n\n# Get all notebook IDs\nnblm --json notebooks recent | jq '.notebooks[].notebookId'\n\n# Get the most recently updated notebook\nnblm --json notebooks recent | jq '.notebooks[0]'\n</code></pre> <p>API Limitations</p> <ul> <li>Notebooks are sorted by most recently updated first</li> <li>The <code>--page-size</code> option is accepted but pagination is not implemented by the API (as of 2025-10-25)</li> <li>All notebooks are returned regardless of <code>--page-size</code> value</li> </ul>"},{"location":"cli/notebooks/#delete","title":"delete","text":"<p>Delete one or more notebooks.</p>"},{"location":"cli/notebooks/#usage_2","title":"Usage","text":"<pre><code>nblm notebooks delete --notebook-name &lt;NAME&gt; [--notebook-name &lt;NAME&gt;...]\n</code></pre>"},{"location":"cli/notebooks/#options_2","title":"Options","text":"Option Description Required <code>--notebook-name &lt;NAME&gt;</code> Full notebook resource name (can be repeated) Yes"},{"location":"cli/notebooks/#examples_2","title":"Examples","text":"<p>Delete a single notebook:</p> <pre><code>nblm notebooks delete \\\n  --notebook-name \"projects/123456789012/locations/global/notebooks/abc123\"\n</code></pre> <p>Delete multiple notebooks:</p> <pre><code>nblm notebooks delete \\\n  --notebook-name \"projects/123456789012/locations/global/notebooks/abc123\" \\\n  --notebook-name \"projects/123456789012/locations/global/notebooks/def456\"\n</code></pre> <p>Get notebook name from recent list:</p> <pre><code># Get the full notebook name\nNOTEBOOK_NAME=$(nblm --json notebooks recent | jq -r '.notebooks[0].name')\n\n# Delete it\nnblm notebooks delete --notebook-name \"$NOTEBOOK_NAME\"\n</code></pre>"},{"location":"cli/notebooks/#notes_1","title":"Notes","text":"<ul> <li>Important: Despite the API being named \"batchDelete\", it only accepts one notebook at a time (as of 2025-10-25)</li> <li>The CLI automatically handles this limitation by calling the API sequentially for each notebook</li> <li>Deletion is permanent and cannot be undone</li> <li>All sources and content within the notebook are also deleted</li> </ul>"},{"location":"cli/notebooks/#common-patterns","title":"Common Patterns","text":""},{"location":"cli/notebooks/#create-and-save-notebook-id","title":"Create and save notebook ID","text":"<pre><code># Create notebook and extract ID\nNOTEBOOK_ID=$(nblm --json notebooks create --title \"My Notebook\" | jq -r '.notebookId')\n\necho \"Created notebook: $NOTEBOOK_ID\"\n\n# Use the ID in subsequent commands\nnblm sources add --notebook-id \"$NOTEBOOK_ID\" --web-url \"https://example.com\"\n</code></pre>"},{"location":"cli/notebooks/#list-and-filter-notebooks","title":"List and filter notebooks","text":"<pre><code># Find notebooks by title\nnblm --json notebooks recent | jq '.notebooks[] | select(.title | contains(\"Research\"))'\n\n# Count notebooks\nnblm --json notebooks recent | jq '.notebooks | length'\n\n# Get notebooks created today\nTODAY=$(date +%Y-%m-%d)\nnblm --json notebooks recent | jq \".notebooks[] | select(.createTime | startswith(\\\"$TODAY\\\"))\"\n</code></pre>"},{"location":"cli/notebooks/#delete-all-notebooks-dangerous","title":"Delete all notebooks (dangerous)","text":"<pre><code># WARNING: This deletes ALL notebooks!\nnblm --json notebooks recent | \\\n  jq -r '.notebooks[].name' | \\\n  xargs -I {} nblm notebooks delete --notebook-name {}\n</code></pre>"},{"location":"cli/notebooks/#error-handling","title":"Error Handling","text":""},{"location":"cli/notebooks/#common-errors","title":"Common Errors","text":"<p>Notebook not found:</p> <pre><code>Error: Notebook not found\nCause: The specified notebook does not exist or has been deleted\n</code></pre> <p>Permission denied:</p> <pre><code>Error: Permission denied\nCause: Your account does not have access to this notebook or project\n</code></pre> <p>Invalid notebook name format:</p> <pre><code>Error: Invalid notebook name format\nCause: Notebook name must be in format: projects/PROJECT_NUMBER/locations/LOCATION/notebooks/NOTEBOOK_ID\n</code></pre>"},{"location":"cli/notebooks/#next-steps","title":"Next Steps","text":"<ul> <li>Sources Commands - Add content to notebooks</li> <li>Audio Commands - Create audio overviews</li> <li>Share Commands - Share notebooks with others</li> </ul>"},{"location":"cli/share/","title":"Share Commands","text":"<p>Share notebooks with other users.</p> <p>Testing Status</p> <p>This command has not been tested in a real environment as it requires multiple Google accounts. The documentation is based on the API specification and should work as described, but functionality is not guaranteed. Use at your own risk.</p> <p>Official Documentation</p> <p>For detailed information about sharing permissions and requirements, see Share notebooks - Google Cloud.</p> <p>Contributions Welcome</p> <p>If you have access to a multi-user environment and can test this functionality, we would greatly appreciate your contributions. Please see CONTRIBUTING.md for how to contribute test results or improvements.</p>"},{"location":"cli/share/#available-commands","title":"Available Commands","text":"Command Description <code>add</code> Share a notebook with users"},{"location":"cli/share/#add","title":"add","text":"<p>Share a notebook with one or more users by email.</p>"},{"location":"cli/share/#usage","title":"Usage","text":"<pre><code>nblm share add --notebook-id &lt;ID&gt; --email &lt;EMAIL&gt; [--email &lt;EMAIL&gt;...] --role &lt;ROLE&gt;\n</code></pre>"},{"location":"cli/share/#options","title":"Options","text":"Option Description Required <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes <code>--email &lt;EMAIL&gt;</code> User email address (can be repeated) Yes <code>--role &lt;ROLE&gt;</code> Permission role Yes"},{"location":"cli/share/#roles","title":"Roles","text":"Role Permissions <code>owner</code> Full control (manage sharing, delete) <code>writer</code> Edit notebook and sources <code>reader</code> Read-only access <code>not-shared</code> Remove user access"},{"location":"cli/share/#examples","title":"Examples","text":"<p>Share with a single user:</p> <pre><code>nblm --auth gcloud share add \\\n  --notebook-id abc123 \\\n  --email user@example.com \\\n  --role reader\n</code></pre> <p>Share with multiple users:</p> <pre><code>nblm --auth gcloud share add \\\n  --notebook-id abc123 \\\n  --email user1@example.com \\\n  --email user2@example.com \\\n  --role writer\n</code></pre> <p>Grant ownership:</p> <pre><code>nblm --auth gcloud share add \\\n  --notebook-id abc123 \\\n  --email collaborator@example.com \\\n  --role owner\n</code></pre> <p>Remove user access:</p> <pre><code>nblm --auth gcloud share add \\\n  --notebook-id abc123 \\\n  --email user@example.com \\\n  --role not-shared\n</code></pre> <p>JSON output:</p> <pre><code>nblm --auth gcloud --json share add \\\n  --notebook-id abc123 \\\n  --email user@example.com \\\n  --role reader\n</code></pre> <p>Output:</p> <pre><code>{\n  \"success\": true\n}\n</code></pre> <p>Sharing Requirements</p> <ul> <li>Users must have Google accounts with the specified email addresses</li> <li>Users will receive a notification when a notebook is shared with them</li> <li>The <code>owner</code> role allows users to delete the notebook and manage sharing</li> <li>Use <code>not-shared</code> role to revoke access</li> </ul> <p>Current Limitations</p> <ul> <li>Cannot list current sharing settings via CLI (use NotebookLM web UI)</li> <li>Cannot retrieve audit logs of sharing actions via CLI</li> </ul>"},{"location":"cli/share/#next-steps","title":"Next Steps","text":"<ul> <li>Notebooks Commands - Create and manage notebooks</li> <li>Sources Commands - Add content to notebooks</li> </ul>"},{"location":"cli/sources/","title":"Sources Commands","text":"<p>Manage sources (content) within NotebookLM notebooks.</p>"},{"location":"cli/sources/#available-commands","title":"Available Commands","text":"Command Description <code>add</code> Add sources to a notebook <code>upload</code> Upload a file as a source <code>get</code> Get details of a specific source <code>delete</code> Delete sources from a notebook"},{"location":"cli/sources/#add","title":"add","text":"<p>Add one or more sources to a notebook.</p>"},{"location":"cli/sources/#usage","title":"Usage","text":"<pre><code>nblm sources add --notebook-id &lt;ID&gt; [SOURCE_OPTIONS...]\n</code></pre>"},{"location":"cli/sources/#options","title":"Options","text":"Option Description Required Can Repeat <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes No <code>--web-url &lt;URL&gt;</code> Web page URL No Yes <code>--web-name &lt;NAME&gt;</code> Display name for web source No Yes <code>--text &lt;CONTENT&gt;</code> Text content No Yes <code>--text-name &lt;NAME&gt;</code> Display name for text source No Yes <code>--video-url &lt;URL&gt;</code> YouTube video URL No Yes <code>--drive-document-id &lt;ID&gt;</code> Google Drive document ID No Yes <code>--drive-mime-type &lt;TYPE&gt;</code> Google Drive MIME type No Yes <code>--drive-name &lt;NAME&gt;</code> Display name for Drive doc No Yes <p>Note: At least one source option must be provided.</p>"},{"location":"cli/sources/#examples","title":"Examples","text":"<p>Add a web URL:</p> <pre><code>nblm sources add \\\n  --notebook-id abc123 \\\n  --web-url \"https://example.com\" \\\n  --web-name \"Example Website\"\n</code></pre> <p>Add text content:</p> <pre><code>nblm sources add \\\n  --notebook-id abc123 \\\n  --text \"My research notes\" \\\n  --text-name \"Notes\"\n</code></pre> <p>Add YouTube video:</p> <pre><code>nblm sources add \\\n  --notebook-id abc123 \\\n  --video-url \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n</code></pre> <p>Add multiple sources at once:</p> <pre><code>nblm sources add \\\n  --notebook-id abc123 \\\n  --web-url \"https://docs.python.org\" \\\n  --web-name \"Python Docs\" \\\n  --text \"Sample notes\" \\\n  --text-name \"My Notes\" \\\n  --video-url \"https://www.youtube.com/watch?v=VIDEO_ID\"\n</code></pre> <p>Add Google Drive file:</p> <pre><code>nblm sources add \\\n  --notebook-id abc123 \\\n  --drive-document-id \"FILE_ID\" \\\n  --drive-mime-type \"application/vnd.google-apps.presentation\" \\\n  --drive-name \"Team Update Slides\"\n</code></pre> <p>Google Drive File ID</p> <p><code>FILE_ID</code> can be extracted from the Drive URL at <code>/d/&lt;ID&gt;/</code> (e.g., <code>https://drive.google.com/file/d/&lt;ID&gt;/xxx</code>). Ensure the authenticated account has view access to the file.</p> <p>Drive Access Validation</p> <p>When you add Drive sources, nblm validates that the token includes the <code>https://www.googleapis.com/auth/drive.file</code> (or broader <code>drive</code>) scope and that the authenticated account can open the document. If either check fails, the upload is aborted with an error instead of creating placeholder metadata.</p> <p>JSON output:</p> <pre><code>nblm --json sources add \\\n  --notebook-id abc123 \\\n  --web-url \"https://example.com\"\n</code></pre> <p>Output:</p> <pre><code>{\n  \"sources\": [\n    {\n      \"name\": \"projects/123456789012/locations/global/notebooks/abc123/sources/source-1\",\n      \"title\": \"Example Website\",\n      \"createTime\": \"2025-10-25T10:30:00Z\"\n    }\n  ]\n}\n</code></pre> <p>Source Requirements</p> <ul> <li>Web URLs are fetched and indexed automatically</li> <li>Text content must not be empty</li> <li>Video URLs currently only support YouTube (<code>youtubeUrl</code> field)</li> <li>Google Drive sources require <code>gcloud auth login --enable-gdrive-access</code> and the authenticated account must have access to the document</li> <li>The <code>--web-name</code> and <code>--text-name</code> options are optional; if not provided, defaults are used</li> </ul>"},{"location":"cli/sources/#upload","title":"upload","text":"<p>Upload a local file as a notebook source.</p>"},{"location":"cli/sources/#usage_1","title":"Usage","text":"<pre><code>nblm sources upload --notebook-id &lt;ID&gt; --file &lt;PATH&gt; [OPTIONS]\n</code></pre>"},{"location":"cli/sources/#options_1","title":"Options","text":"Option Description Required <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes <code>--file &lt;PATH&gt;</code> Path to file to upload Yes <code>--content-type &lt;TYPE&gt;</code> HTTP Content-Type (MIME type) No <code>--display-name &lt;NAME&gt;</code> Display name for the source No"},{"location":"cli/sources/#examples_1","title":"Examples","text":"<p>Upload a PDF:</p> <pre><code>nblm sources upload \\\n  --notebook-id abc123 \\\n  --file document.pdf\n</code></pre> <p>Upload with custom content type:</p> <pre><code>nblm sources upload \\\n  --notebook-id abc123 \\\n  --file report.txt \\\n  --content-type \"text/plain\"\n</code></pre> <p>Upload with display name:</p> <pre><code>nblm sources upload \\\n  --notebook-id abc123 \\\n  --file research.pdf \\\n  --display-name \"Research Paper 2025\"\n</code></pre> <p>JSON output:</p> <pre><code>nblm --json sources upload \\\n  --notebook-id abc123 \\\n  --file document.pdf\n</code></pre> <p>Output:</p> <pre><code>{\n  \"sourceId\": \"source-abc123\"\n}\n</code></pre> <p>Upload Requirements</p> <ul> <li>Content type is auto-detected from file extension if not specified</li> <li>Supported file types include: PDF, TXT, DOCX, and more</li> <li>File must exist and be readable</li> <li>Empty files cannot be uploaded</li> <li>Maximum file size may be limited by the API</li> </ul>"},{"location":"cli/sources/#get","title":"get","text":"<p>Get details of a specific source.</p>"},{"location":"cli/sources/#usage_2","title":"Usage","text":"<pre><code>nblm sources get --notebook-id &lt;ID&gt; --source-id &lt;SOURCE_ID&gt;\n</code></pre>"},{"location":"cli/sources/#options_2","title":"Options","text":"Option Description Required <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes <code>--source-id &lt;SOURCE_ID&gt;</code> Source identifier Yes"},{"location":"cli/sources/#examples_2","title":"Examples","text":"<p>Get source details:</p> <pre><code>nblm sources get \\\n  --notebook-id abc123 \\\n  --source-id source-1\n</code></pre> <p>JSON output:</p> <pre><code>nblm --json sources get \\\n  --notebook-id abc123 \\\n  --source-id source-1\n</code></pre> <p>Output:</p> <pre><code>{\n  \"name\": \"projects/123456789012/locations/global/notebooks/abc123/sources/source-1\",\n  \"title\": \"Example Website\",\n  \"metadata\": {\n    \"wordCount\": 1500,\n    \"sourceAddedTimestamp\": \"2025-10-25T10:30:00Z\"\n  },\n  \"settings\": {\n    \"status\": \"ACTIVE\"\n  }\n}\n</code></pre> <p>Source Details</p> <ul> <li>Use this to verify source details after adding</li> <li>Useful for checking processing status</li> <li>The <code>source-id</code> can be extracted from the full source name</li> </ul>"},{"location":"cli/sources/#delete","title":"delete","text":"<p>Delete one or more sources from a notebook.</p>"},{"location":"cli/sources/#usage_3","title":"Usage","text":"<pre><code>nblm sources delete --notebook-id &lt;ID&gt; --source-name &lt;NAME&gt; [--source-name &lt;NAME&gt;...]\n</code></pre>"},{"location":"cli/sources/#options_3","title":"Options","text":"Option Description Required <code>--notebook-id &lt;ID&gt;</code> Notebook identifier Yes <code>--source-name &lt;NAME&gt;</code> Full source resource name (can be repeated) Yes"},{"location":"cli/sources/#examples_3","title":"Examples","text":"<p>Delete a single source:</p> <pre><code>nblm sources delete \\\n  --notebook-id abc123 \\\n  --source-name \"projects/123456789012/locations/global/notebooks/abc123/sources/source-1\"\n</code></pre> <p>Delete multiple sources:</p> <pre><code>nblm sources delete \\\n  --notebook-id abc123 \\\n  --source-name \"projects/.../notebooks/abc123/sources/source-1\" \\\n  --source-name \"projects/.../notebooks/abc123/sources/source-2\"\n</code></pre> <p>Get source names from notebook and delete:</p> <pre><code># List sources and extract names (requires getting notebook details first)\nSOURCE_NAME=\"projects/123456789012/locations/global/notebooks/abc123/sources/source-1\"\n\nnblm sources delete \\\n  --notebook-id abc123 \\\n  --source-name \"$SOURCE_NAME\"\n</code></pre> <p>Deletion is Permanent</p> <ul> <li>Deletion is permanent and cannot be undone</li> <li>The full source resource name is required (not just the source ID)</li> <li>Multiple sources can be deleted in a single command</li> </ul>"},{"location":"cli/sources/#common-patterns","title":"Common Patterns","text":""},{"location":"cli/sources/#add-and-verify-source","title":"Add and verify source","text":"<pre><code># Add source\nRESULT=$(nblm --json sources add \\\n  --notebook-id abc123 \\\n  --web-url \"https://example.com\")\n\n# Extract source name\nSOURCE_NAME=$(echo \"$RESULT\" | jq -r '.sources[0].name')\n\n# Extract source ID from name\nSOURCE_ID=$(echo \"$SOURCE_NAME\" | awk -F'/' '{print $NF}')\n\n# Get source details\nnblm sources get \\\n  --notebook-id abc123 \\\n  --source-id \"$SOURCE_ID\"\n</code></pre>"},{"location":"cli/sources/#bulk-upload-files","title":"Bulk upload files","text":"<pre><code># Upload all PDFs in a directory\nfor file in *.pdf; do\n  echo \"Uploading $file...\"\n  nblm sources upload \\\n    --notebook-id abc123 \\\n    --file \"$file\"\ndone\n</code></pre>"},{"location":"cli/sources/#add-sources-from-a-list","title":"Add sources from a list","text":"<pre><code># urls.txt contains one URL per line\nwhile IFS= read -r url; do\n  echo \"Adding $url...\"\n  nblm sources add \\\n    --notebook-id abc123 \\\n    --web-url \"$url\"\ndone &lt; urls.txt\n</code></pre>"},{"location":"cli/sources/#error-handling","title":"Error Handling","text":""},{"location":"cli/sources/#common-errors","title":"Common Errors","text":"<p>Empty text content:</p> <pre><code>Error: Text content cannot be empty\nCause: The --text option was provided with empty string\n</code></pre> <p>File not found:</p> <pre><code>Error: File not found: /path/to/file\nCause: The specified file does not exist or is not readable\n</code></pre> <p>Invalid notebook ID:</p> <pre><code>Error: Notebook not found\nCause: The specified notebook does not exist or you don't have access\n</code></pre>"},{"location":"cli/sources/#next-steps","title":"Next Steps","text":"<ul> <li>Notebooks Commands - Create and manage notebooks</li> <li>Audio Commands - Create audio overviews from sources</li> </ul>"},{"location":"getting-started/authentication/","title":"Authentication Guide","text":"<p>This guide covers all authentication methods supported by nblm-rs for accessing the NotebookLM Enterprise API.</p>"},{"location":"getting-started/authentication/#overview","title":"Overview","text":"<p>nblm-rs supports two authentication methods:</p> Method Use Case Operations Support Recommended gcloud CLI Local development, interactive use Full (read + write) \u2713 Yes Environment Variable CI/CD, automation, production Full (read + write) For automation"},{"location":"getting-started/authentication/#method-1-gcloud-cli-recommended","title":"Method 1: gcloud CLI (Recommended)","text":"<p>Uses your Google Cloud user account credentials via the gcloud CLI.</p>"},{"location":"getting-started/authentication/#prerequisites","title":"Prerequisites","text":"<pre><code># Install gcloud CLI\n# See: https://cloud.google.com/sdk/docs/install\n\n# Authenticate\ngcloud auth login\n\n# Set project (optional)\ngcloud config set project YOUR_PROJECT_ID\n</code></pre>"},{"location":"getting-started/authentication/#cli-usage","title":"CLI Usage","text":"<pre><code># Using gcloud authentication (default)\nnblm --project-number PROJECT_NUMBER \\\n  --location global \\\n  --endpoint-location global \\\n  notebooks recent\n\n# Using gcloud authentication\n#  (when you specify --auth gcloud, the CLI automatically runs `gcloud auth print-access-token` internally to obtain the access token for authentication)\nnblm --auth gcloud \\\n  --project-number PROJECT_NUMBER \\\n  --location global \\\n  --endpoint-location global \\\n  notebooks recent\n</code></pre>"},{"location":"getting-started/authentication/#python-usage","title":"Python Usage","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\n# Initialize with gcloud auth\ntoken_provider = GcloudTokenProvider()\nclient = NblmClient(\n    project_number=\"YOUR_PROJECT_NUMBER\",\n    location=\"global\",\n    endpoint_location=\"global\",\n    token_provider=token_provider,\n)\n\n# Use the client\nnotebook = client.create_notebook(title=\"My Notebook\")\nprint(f\"Created: {notebook.name}\")\n</code></pre>"},{"location":"getting-started/authentication/#custom-gcloud-binary-path","title":"Custom gcloud Binary Path","text":"<pre><code># If gcloud is not in PATH\ntoken_provider = GcloudTokenProvider(\"/custom/path/to/gcloud\")\n</code></pre>"},{"location":"getting-started/authentication/#pros-cons","title":"Pros &amp; Cons","text":"<ul> <li> <p> Pros</p> <ul> <li>Easy setup for developers</li> <li>Uses existing gcloud credentials</li> <li>Full API access (read + write)</li> <li>Automatic token refresh</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Requires gcloud CLI installed</li> <li>Interactive login needed initially</li> <li>Not suitable for unattended automation</li> </ul> </li> </ul>"},{"location":"getting-started/authentication/#method-2-environment-variable","title":"Method 2: Environment Variable","text":"<p>Uses an access token from an environment variable. Suitable for CI/CD pipelines.</p>"},{"location":"getting-started/authentication/#setup","title":"Setup","text":"<pre><code># Get access token from your authenticated account\nexport NBLM_ACCESS_TOKEN=$(gcloud auth print-access-token)\n\n# Or use any other source of valid access token\nexport NBLM_ACCESS_TOKEN=\"ya29....\"\n</code></pre> <p>Token lifetime</p> <p>Tokens acquired via <code>gcloud auth print-access-token</code> \u2014 and any environment variables that reuse them \u2014 expire after roughly one hour. Refresh them regularly and, for unattended workloads, favor tokens issued from a dedicated service account or Workload Identity Federation with automatic rotation.</p>"},{"location":"getting-started/authentication/#cli-usage_1","title":"CLI Usage","text":"<pre><code>nblm --auth env \\\n  --project-number PROJECT_NUMBER \\\n  notebooks recent\n</code></pre>"},{"location":"getting-started/authentication/#python-usage_1","title":"Python Usage","text":"<pre><code>from nblm import NblmClient, EnvTokenProvider\n\n# Initialize with environment variable\ntoken_provider = EnvTokenProvider(\"NBLM_ACCESS_TOKEN\")\nclient = NblmClient(\n    project_number=\"YOUR_PROJECT_NUMBER\",\n    location=\"global\",\n    endpoint_location=\"global\",\n    token_provider=token_provider,\n)\n\nnotebook = client.create_notebook(title=\"My Notebook\")\n</code></pre>"},{"location":"getting-started/authentication/#custom-environment-variable-name","title":"Custom Environment Variable Name","text":"<pre><code># Use different variable name\nexport MY_CUSTOM_TOKEN=$(gcloud auth print-access-token)\n\ntoken_provider = EnvTokenProvider(\"MY_CUSTOM_TOKEN\")\n</code></pre> <p>Drive-specific requirement</p> <p>If you intend to ingest Google Drive sources, the token must include the <code>https://www.googleapis.com/auth/drive.file</code> (or broader <code>drive</code>) scope. The CLI and SDK validate this scope before uploading Drive documents.</p>"},{"location":"getting-started/authentication/#pros-cons_1","title":"Pros &amp; Cons","text":"<ul> <li> <p> Pros</p> <ul> <li>No gcloud CLI required at runtime</li> <li>Works in containerized environments</li> <li>Suitable for CI/CD pipelines</li> <li>Full API access (read + write)</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Tokens expire after 1 hour</li> <li>Manual token refresh needed</li> <li>Token must be obtained from authenticated source</li> </ul> </li> </ul>"},{"location":"getting-started/authentication/#configuration","title":"Configuration","text":""},{"location":"getting-started/authentication/#environment-variables","title":"Environment Variables","text":"<p>All methods can use these environment variables to avoid repeating parameters:</p> <pre><code>export NBLM_PROJECT_NUMBER=\"123456789012\"\nexport NBLM_LOCATION=\"global\"\nexport NBLM_ENDPOINT_LOCATION=\"global\"\n</code></pre> <p>Then: <pre><code># No need to specify --project-number, --location, --endpoint-location\nnblm notebooks recent\n</code></pre></p>"},{"location":"getting-started/authentication/#location-options","title":"Location Options","text":"<p>NotebookLM API supports these multi-region locations: - <code>global</code> - Recommended by Google for best performance - <code>us</code> - United States (for compliance requirements) - <code>eu</code> - European Union (for compliance requirements)</p> <p>Location consistency</p> <p><code>NBLM_LOCATION</code> and <code>NBLM_ENDPOINT_LOCATION</code> must always be set to the same value.</p>"},{"location":"getting-started/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/authentication/#gcloud-command-not-found","title":"\"gcloud command not found\"","text":"<p>Solution: Install gcloud CLI or use a different authentication method.</p>"},{"location":"getting-started/authentication/#failed-to-get-access-token-from-gcloud","title":"\"Failed to get access token from gcloud\"","text":"<p>Solution: Run <code>gcloud auth login</code> to authenticate.</p>"},{"location":"getting-started/authentication/#token-expired-error","title":"\"Token expired\" error","text":"<p>Solution: - For gcloud: Authentication is automatic - For env token: Re-run <code>export NBLM_ACCESS_TOKEN=$(gcloud auth print-access-token)</code></p>"},{"location":"getting-started/authentication/#recommendation-summary","title":"Recommendation Summary","text":"Scenario Recommended Method Local development gcloud CLI CI/CD pipelines Environment Variable Production automation Environment Variable Server applications Environment Variable"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configure the NotebookLM Enterprise API client with your Google Cloud project.</p>"},{"location":"getting-started/configuration/#project-number","title":"Project Number","text":"<p>The NotebookLM API requires a Google Cloud project number (not project ID).</p>"},{"location":"getting-started/configuration/#get-your-project-number","title":"Get Your Project Number","text":"<pre><code>gcloud projects describe YOUR_PROJECT_ID --format=\"value(projectNumber)\"\n</code></pre> <p>Example output: <code>123456789012</code></p>"},{"location":"getting-started/configuration/#difference-between-project-id-and-project-number","title":"Difference Between Project ID and Project Number","text":"<ul> <li>Project ID: Human-readable identifier (e.g., <code>my-project-2024</code>)</li> <li>Project Number: Unique numerical identifier (e.g., <code>123456789012</code>)</li> </ul> <p>The API requires the project number.</p>"},{"location":"getting-started/configuration/#locations","title":"Locations","text":"<p>The NotebookLM API supports the following multi-region locations:</p> Location Description Recommendation <code>global</code> Best performance and features Recommended <code>us</code> United States only For compliance requirements <code>eu</code> European Union only For compliance requirements <p>Location consistency</p> <p><code>location</code> and <code>endpoint_location</code> must always be set to the same value. The API treats them as a pair, and mismatched values result in <code>INVALID_ARGUMENT</code> errors.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Set environment variables to avoid repeating options in every command.</p>"},{"location":"getting-started/configuration/#debug-logging","title":"Debug Logging","text":"<p>Set <code>NBLM_DEBUG_HTTP=1</code> to emit full HTTP response bodies for every API call. This works for both the CLI and Python SDK and is handy when you need to inspect raw JSON during contract changes.</p> <pre><code># Enable verbose HTTP logging\nexport NBLM_DEBUG_HTTP=1\n</code></pre> <p>Sensitive data</p> <p>The full response payload can contain sensitive information. Only enable debug logging in trusted environments and disable it once you finish troubleshooting.</p>"},{"location":"getting-started/configuration/#cli","title":"CLI","text":"<pre><code># Required\nexport NBLM_PROJECT_NUMBER=\"123456789012\"\n\n# Recommended\nexport NBLM_LOCATION=\"global\"\nexport NBLM_ENDPOINT_LOCATION=\"global\"\n\n# Optional (for specific authentication methods)\nexport NBLM_ACCESS_TOKEN=\"your-access-token\"\n</code></pre>"},{"location":"getting-started/configuration/#python-sdk","title":"Python SDK","text":"<pre><code>import os\n\n# Set before creating client\nos.environ[\"NBLM_PROJECT_NUMBER\"] = \"123456789012\"\nos.environ[\"NBLM_LOCATION\"] = \"global\"\nos.environ[\"NBLM_ENDPOINT_LOCATION\"] = \"global\"\n</code></pre> <p>Or pass directly to the client:</p> <pre><code>from nblm import NblmClient, GcloudTokenProvider\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\",\n    location=\"global\",\n    endpoint_location=\"global\"\n)\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":""},{"location":"getting-started/configuration/#cli_1","title":"CLI","text":"<p>The CLI does not currently support a configuration file. Use environment variables instead.</p>"},{"location":"getting-started/configuration/#python-sdk_1","title":"Python SDK","text":"<p>You can create a configuration wrapper:</p> <pre><code># config.py\nimport os\nfrom nblm import NblmClient, GcloudTokenProvider\n\ndef create_client():\n    return NblmClient(\n        token_provider=GcloudTokenProvider(),\n        project_number=os.getenv(\"NBLM_PROJECT_NUMBER\", \"123456789012\"),\n        location=os.getenv(\"NBLM_LOCATION\", \"global\"),\n        endpoint_location=os.getenv(\"NBLM_ENDPOINT_LOCATION\", \"global\"),\n    )\n</code></pre> <p>Then use it in your code:</p> <pre><code>from config import create_client\n\nclient = create_client()\nnotebook = client.create_notebook(title=\"My Notebook\")\n</code></pre>"},{"location":"getting-started/configuration/#verification","title":"Verification","text":""},{"location":"getting-started/configuration/#cli_2","title":"CLI","text":"<pre><code># Should work without additional flags if environment variables are set\nnblm notebooks recent\n</code></pre>"},{"location":"getting-started/configuration/#python-sdk_2","title":"Python SDK","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Should successfully list notebooks\nresponse = client.list_recently_viewed()\nprint(f\"Found {len(response.notebooks)} notebooks\")\n</code></pre> <p>Validate with doctor</p> <p>Once your configuration variables are in place, run <code>nblm doctor</code> to verify authentication, project bindings, and location settings before moving to production.</p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>CLI Overview - Start using the CLI</li> <li>Python Quickstart - Start using Python SDK</li> <li>Troubleshooting - Common configuration issues</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Install the NotebookLM Enterprise API client as a CLI tool or Python SDK.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Google Cloud project with NotebookLM API enabled</li> <li>Google Cloud authentication (gcloud CLI recommended)</li> </ul>"},{"location":"getting-started/installation/#cli-installation","title":"CLI Installation","text":"Homebrew (macOS)From crates.ioFrom Source <pre><code>brew tap k-dash/nblm https://github.com/K-dash/homebrew-nblm\nbrew install k-dash/nblm/nblm\nnblm --version\n</code></pre> <pre><code>cargo install nblm-cli\n</code></pre> <pre><code>git clone https://github.com/K-dash/nblm-rs.git\ncd nblm-rs\ncargo build --release\n</code></pre> <p>The binary will be available at <code>target/release/nblm</code>.</p> <p>Optional: Add to PATH</p> <pre><code># Linux/macOS\nsudo cp target/release/nblm /usr/local/bin/\n\n# Or add to your shell profile\nexport PATH=\"$PATH:/path/to/nblm-rs/target/release\"\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>nblm --version\n\n# nblm 0.2.1\n</code></pre>"},{"location":"getting-started/installation/#python-sdk-installation","title":"Python SDK Installation","text":"With pipWith uvFrom Source <pre><code>pip install nblm\n</code></pre> <pre><code>uv add nblm\n</code></pre> <pre><code>git clone https://github.com/K-dash/nblm-rs.git\ncd nblm-rs\ncd python\npip install maturin\nmaturin develop\n</code></pre>"},{"location":"getting-started/installation/#verify-installation_1","title":"Verify Installation","text":"<pre><code>import nblm\nprint(nblm.__version__)\n</code></pre>"},{"location":"getting-started/installation/#platform-support","title":"Platform Support","text":"Platform CLI Python SDK \ud83d\udc27 Linux (x86_64) \u2705 Supported \u2705 Supported \ud83d\udc27 Linux (aarch64) \u2705 Supported \u2705 Supported \ud83c\udf4e macOS (Intel) \u2705 Supported \u2705 Supported \ud83c\udf4e macOS (Apple Silicon) \u2705 Supported \u2705 Supported \ud83e\ude9f Windows \u274c Not Supported \u274c Not Supported <p>Windows Support</p> <p>Windows support is not available. Consider using WSL (Windows Subsystem for Linux) as a workaround.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Authentication Setup - Configure authentication</li> <li>Configuration - Set up project numbers and locations</li> <li>CLI Overview - Start using the CLI</li> <li>Python Quickstart - Start using the Python SDK</li> </ul>"},{"location":"guides/troubleshooting/","title":"Troubleshooting","text":"<p>This guide collects the most common issues reported for the NotebookLM Enterprise clients (CLI and Python SDK) and outlines quick checks to resolve them.</p>"},{"location":"guides/troubleshooting/#authentication-errors","title":"Authentication errors","text":"<ul> <li>Confirm that <code>GOOGLE_APPLICATION_CREDENTIALS</code> points to the correct service-account JSON file.</li> <li>If you rely on the gcloud CLI, refresh Application Default Credentials with <code>gcloud auth application-default login</code>.</li> <li>Verify that the notebook region and the project number used for authentication match the resources you are operating against.</li> </ul>"},{"location":"guides/troubleshooting/#403-or-404-responses-from-the-api","title":"403 or 404 responses from the API","text":"<ul> <li>Run <code>nblm-cli doctor</code> to double-check the <code>--project-number</code> and <code>--location</code> values.</li> <li>Ensure the NotebookLM Enterprise API is enabled for the target project in Cloud Console.</li> <li>When accessing shared notebooks, confirm that the owner has granted your service account or user principal the necessary permissions.</li> </ul>"},{"location":"guides/troubleshooting/#upload-timeouts","title":"Upload timeouts","text":"<ul> <li>The CLI uses a default timeout of a few minutes. Increase it with <code>--timeout-seconds</code> and re-run the command.</li> <li>For the Python SDK, pass a higher <code>timeout</code> value to <code>client.upload_source</code> and enable the retry policy.</li> <li>Consider compressing or splitting very large files before uploading them.</li> </ul>"},{"location":"guides/troubleshooting/#when-you-need-more-help","title":"When you need more help","text":"<ul> <li>Launch commands with <code>--debug</code> to capture verbose logs.</li> <li>When filing a GitHub Issue, include the command that failed, environment details, and sanitized log snippets (omit sensitive data).</li> <li>For contribution guidelines, refer to CONTRIBUTING.md.</li> </ul>"},{"location":"python/","title":"Python SDK Overview","text":"<p>Python bindings for the NotebookLM Enterprise API, powered by Rust via PyO3.</p>"},{"location":"python/#features","title":"Features","text":"<ul> <li>Type-safe API: Full type hints for IDE autocomplete and static analysis</li> <li>Fast: Powered by Rust for high performance</li> <li>Easy to use: Pythonic API with sensible defaults</li> <li>Comprehensive: Supports notebooks, sources, and audio overviews</li> </ul>"},{"location":"python/#supported-operations","title":"Supported Operations","text":"Category Operations Status Notebooks Create, list, delete Available Sources Add (web, text, video), upload files, get, delete Available Audio Overview Create, delete Available Sharing Share with users Not available"},{"location":"python/#installation","title":"Installation","text":"<pre><code>pip install nblm\n</code></pre> <p>Or with uv:</p> <pre><code>uv add nblm\n</code></pre> <p>Requirements: Python 3.14 or later</p>"},{"location":"python/#quick-example","title":"Quick Example","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, WebSource\n\n# Initialize client\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Create notebook\nnotebook = client.create_notebook(title=\"My Notebook\")\n\n# Add sources\nclient.add_sources(\n    notebook_id=notebook.notebook_id,\n    web_sources=[WebSource(url=\"https://example.com\", name=\"Example\")]\n)\n\n# Create audio overview\naudio = client.create_audio_overview(notebook.notebook_id)\nprint(f\"Audio status: {audio.status}\")\n</code></pre>"},{"location":"python/#documentation","title":"Documentation","text":""},{"location":"python/#getting-started","title":"Getting Started","text":"<ul> <li>Quickstart - Get started in 5 minutes</li> <li>Authentication - Set up authentication</li> <li>Configuration - Configure project and location</li> </ul>"},{"location":"python/#api-reference","title":"API Reference","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Notebooks API - Notebook operations</li> <li>Sources API - Source operations</li> <li>Audio API - Audio overview operations</li> <li>Error Handling - Exception handling</li> </ul>"},{"location":"python/#authentication-methods","title":"Authentication Methods","text":"<pre><code>from nblm import (\n    GcloudTokenProvider,  # Use gcloud CLI\n    EnvTokenProvider,     # Use environment variable\n    NblmClient\n)\n\n# Method 1: gcloud CLI (recommended)\nprovider = GcloudTokenProvider()\n\n# Method 2: Environment variable\nimport os\nos.environ[\"NBLM_ACCESS_TOKEN\"] = \"your-token\"\nprovider = EnvTokenProvider()\n\n# Create client\nclient = NblmClient(\n    token_provider=provider,\n    project_number=\"123456789012\"\n)\n</code></pre>"},{"location":"python/#debugging-http-responses","title":"Debugging HTTP Responses","text":"<p>Set <code>NBLM_DEBUG_HTTP=1</code> before importing <code>nblm</code> to print the raw JSON bodies returned by the API. The payload can include notebook contents, so only enable this in trusted environments.</p> <pre><code>export NBLM_DEBUG_HTTP=1\npython monitor_api.py --debug-http\n</code></pre>"},{"location":"python/#type-support","title":"Type Support","text":"<p>The SDK includes full type hints:</p> <pre><code>from nblm import (\n    NblmClient,\n    Notebook,\n    NotebookSource,\n    AudioOverviewResponse,\n    ListRecentlyViewedResponse,\n    BatchCreateSourcesResponse,\n    WebSource,\n    TextSource,\n    VideoSource,\n)\n\n# All operations are fully typed\nclient: NblmClient\nnotebook: Notebook = client.create_notebook(title=\"Title\")\nsources: BatchCreateSourcesResponse = client.add_sources(...)\naudio: AudioOverviewResponse = client.create_audio_overview(...)\n</code></pre>"},{"location":"python/#error-handling","title":"Error Handling","text":"<pre><code>from nblm import NblmClient, NblmError\n\ntry:\n    notebook = client.create_notebook(title=\"My Notebook\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n</code></pre> <p>See Error Handling for details.</p>"},{"location":"python/#performance","title":"Performance","text":"<p>The Python SDK is powered by Rust, providing:</p> <ul> <li>Fast execution: Native code performance</li> <li>Memory efficiency: Rust's memory management</li> <li>Thread safety: Safe concurrent operations</li> </ul>"},{"location":"python/#limitations","title":"Limitations","text":"<ul> <li>Sharing operations: Not currently supported</li> <li>Google Drive sources: Supported via <code>GoogleDriveSource</code>; the SDK validates Drive scope (<code>drive</code>/<code>drive.file</code>) and document access before ingesting, returning an error if the requirements are not met</li> <li>Audio configuration: API only accepts empty request (as of 2025-10-25)</li> </ul>"},{"location":"python/#next-steps","title":"Next Steps","text":"<ul> <li>Quickstart - Start building with the Python SDK</li> <li>API Reference - Explore all available methods</li> <li>Examples - See practical examples</li> </ul>"},{"location":"python/api-reference/","title":"API Reference","text":"<p>Complete reference for all classes and methods in the nblm Python SDK.</p>"},{"location":"python/api-reference/#client","title":"Client","text":""},{"location":"python/api-reference/#nblmclient","title":"NblmClient","text":"<p>Main client class for interacting with the NotebookLM API.</p> <pre><code>from nblm import NblmClient, GcloudTokenProvider\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\",\n    location=\"global\",\n    endpoint_location=\"global\"\n)\n</code></pre>"},{"location":"python/api-reference/#constructor-parameters","title":"Constructor Parameters","text":"Parameter Type Required Default Description <code>token_provider</code> TokenProvider Yes - Authentication token provider <code>project_number</code> str Yes - Google Cloud project number <code>location</code> str No \"global\" API location <code>endpoint_location</code> str No \"global\" Endpoint location"},{"location":"python/api-reference/#methods","title":"Methods","text":""},{"location":"python/api-reference/#notebooks","title":"Notebooks","text":"<p><code>create_notebook(title: str) -&gt; Notebook</code></p> <p>Create a new notebook.</p> <pre><code>notebook = client.create_notebook(title=\"My Notebook\")\n</code></pre> <p><code>list_recently_viewed(page_size: Optional[int] = None) -&gt; ListRecentlyViewedResponse</code></p> <p>List recently viewed notebooks.</p> <pre><code>response = client.list_recently_viewed(page_size=10)\n</code></pre> <p><code>delete_notebooks(notebook_names: List[str]) -&gt; BatchDeleteNotebooksResponse</code></p> <p>Delete one or more notebooks.</p> <pre><code>client.delete_notebooks([\n    \"projects/123/locations/global/notebooks/abc\"\n])\n</code></pre>"},{"location":"python/api-reference/#sources","title":"Sources","text":"<p><code>add_sources(notebook_id: str, web_sources: Optional[List[WebSource]] = None, text_sources: Optional[List[TextSource]] = None, drive_sources: Optional[List[GoogleDriveSource]] = None, video_sources: Optional[List[VideoSource]] = None) -&gt; BatchCreateSourcesResponse</code></p> <p>Add sources to a notebook.</p> <pre><code>from nblm import WebSource, TextSource, GoogleDriveSource\n\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    web_sources=[WebSource(url=\"https://example.com\", name=\"Example\")],\n    text_sources=[TextSource(content=\"Notes\", name=\"My Notes\")],\n    drive_sources=[GoogleDriveSource(\n        document_id=\"FILE_ID\",\n        mime_type=\"application/vnd.google-apps.presentation\",\n        name=\"Team Update\",\n    )],\n)\n</code></pre> <p><code>upload_source_file(notebook_id: str, path: str, content_type: Optional[str] = None, display_name: Optional[str] = None) -&gt; UploadSourceFileResponse</code></p> <p>Upload a file as a source.</p> <pre><code>response = client.upload_source_file(\n    notebook_id=\"abc123\",\n    path=\"/path/to/file.pdf\",\n    content_type=\"application/pdf\",\n    display_name=\"My Document\"\n)\n</code></pre> <p><code>get_source(notebook_id: str, source_id: str) -&gt; NotebookSource</code></p> <p>Get a specific source by ID.</p> <pre><code>source = client.get_source(\n    notebook_id=\"abc123\",\n    source_id=\"source-1\"\n)\n</code></pre> <p><code>delete_sources(notebook_id: str, source_names: List[str]) -&gt; BatchDeleteSourcesResponse</code></p> <p>Delete sources from a notebook.</p> <pre><code>client.delete_sources(\n    notebook_id=\"abc123\",\n    source_names=[\"projects/.../notebooks/abc123/sources/source-1\"]\n)\n</code></pre>"},{"location":"python/api-reference/#audio","title":"Audio","text":"<p><code>create_audio_overview(notebook_id: str, request: Optional[AudioOverviewRequest] = None) -&gt; AudioOverviewResponse</code></p> <p>Create an audio overview.</p> <pre><code>from nblm import AudioOverviewRequest\n\naudio = client.create_audio_overview(\n    notebook_id=\"abc123\",\n    request=AudioOverviewRequest()\n)\n</code></pre> <p><code>delete_audio_overview(notebook_id: str) -&gt; None</code></p> <p>Delete an audio overview.</p> <pre><code>client.delete_audio_overview(notebook_id=\"abc123\")\n</code></pre>"},{"location":"python/api-reference/#token-providers","title":"Token Providers","text":""},{"location":"python/api-reference/#gcloudtokenprovider","title":"GcloudTokenProvider","text":"<p>Use gcloud CLI for authentication.</p> <pre><code>from nblm import GcloudTokenProvider\n\n# Default (uses 'gcloud' from PATH)\nprovider = GcloudTokenProvider()\n\n# Custom binary path\nprovider = GcloudTokenProvider(binary=\"/usr/local/bin/gcloud\")\n</code></pre>"},{"location":"python/api-reference/#constructor-parameters_1","title":"Constructor Parameters","text":"Parameter Type Required Default Description <code>binary</code> str No \"gcloud\" Path to gcloud binary"},{"location":"python/api-reference/#envtokenprovider","title":"EnvTokenProvider","text":"<p>Use access token from environment variable.</p> <pre><code>import os\nfrom nblm import EnvTokenProvider\n\nos.environ[\"NBLM_ACCESS_TOKEN\"] = \"your-token\"\nprovider = EnvTokenProvider()\n\n# Or use custom environment variable key\nos.environ[\"MY_TOKEN\"] = \"your-token\"\nprovider = EnvTokenProvider(key=\"MY_TOKEN\")\n</code></pre>"},{"location":"python/api-reference/#constructor-parameters_2","title":"Constructor Parameters","text":"Parameter Type Required Default Description <code>key</code> str No \"NBLM_ACCESS_TOKEN\" Environment variable key"},{"location":"python/api-reference/#models","title":"Models","text":""},{"location":"python/api-reference/#notebook","title":"Notebook","text":"<p>Represents a NotebookLM notebook.</p>"},{"location":"python/api-reference/#attributes","title":"Attributes","text":"Attribute Type Description <code>name</code> Optional[str] Full resource name <code>notebook_id</code> Optional[str] Notebook identifier <code>title</code> Optional[str] Notebook title <code>create_time</code> Optional[str] Creation timestamp <code>update_time</code> Optional[str] Last update timestamp <code>extra</code> dict Additional API response fields"},{"location":"python/api-reference/#websource","title":"WebSource","text":"<p>Web URL source for adding to notebooks.</p> <pre><code>from nblm import WebSource\n\nsource = WebSource(\n    url=\"https://example.com\",\n    name=\"Example Website\"  # Optional\n)\n</code></pre>"},{"location":"python/api-reference/#attributes_1","title":"Attributes","text":"Attribute Type Description <code>url</code> str Web page URL <code>name</code> Optional[str] Display name"},{"location":"python/api-reference/#textsource","title":"TextSource","text":"<p>Text content source for adding to notebooks.</p> <pre><code>from nblm import TextSource\n\nsource = TextSource(\n    content=\"My notes\",\n    name=\"Notes\"  # Optional\n)\n</code></pre>"},{"location":"python/api-reference/#attributes_2","title":"Attributes","text":"Attribute Type Description <code>content</code> str Text content <code>name</code> Optional[str] Display name"},{"location":"python/api-reference/#googledrivesource","title":"GoogleDriveSource","text":"<p>Google Drive document source for adding to notebooks.</p> <pre><code>from nblm import GoogleDriveSource\n\nsource = GoogleDriveSource(\n    document_id=\"FILE_ID\",\n    mime_type=\"application/vnd.google-apps.presentation\",\n    name=\"Team Update Slides\",  # Optional\n)\n</code></pre> <p>Prerequisite: Authenticate with Drive access enabled (<code>gcloud auth login --enable-gdrive-access</code>) and ensure the document is shared with the authenticated account. Tip: <code>document_id</code> can be extracted from the Drive URL at <code>/d/&lt;ID&gt;/</code> (e.g., <code>https://drive.google.com/file/d/&lt;ID&gt;/xxx</code>). Validation: <code>NblmClient.add_sources</code> checks that the token has Drive scope and that the account can open the document. Missing scope or permissions raises <code>NblmError</code>.</p>"},{"location":"python/api-reference/#attributes_3","title":"Attributes","text":"Attribute Type Description <code>document_id</code> str Google Drive document ID <code>mime_type</code> str MIME type returned by the Drive API <code>name</code> Optional[str] Display name shown in NotebookLM"},{"location":"python/api-reference/#videosource","title":"VideoSource","text":"<p>YouTube video source for adding to notebooks.</p> <pre><code>from nblm import VideoSource\n\nsource = VideoSource(url=\"https://www.youtube.com/watch?v=VIDEO_ID\")\n</code></pre>"},{"location":"python/api-reference/#attributes_4","title":"Attributes","text":"Attribute Type Description <code>url</code> str YouTube video URL"},{"location":"python/api-reference/#audiooverviewrequest","title":"AudioOverviewRequest","text":"<p>Request for creating an audio overview.</p> <pre><code>from nblm import AudioOverviewRequest\n\nrequest = AudioOverviewRequest()\n</code></pre> <p>Note: The API currently only accepts empty requests. Configuration fields are not supported.</p>"},{"location":"python/api-reference/#notebooksource","title":"NotebookSource","text":"<p>Represents a source within a notebook.</p>"},{"location":"python/api-reference/#attributes_5","title":"Attributes","text":"Attribute Type Description <code>name</code> str Full resource name <code>title</code> Optional[str] Source title <code>metadata</code> Optional[NotebookSourceMetadata] Source metadata <code>settings</code> Optional[NotebookSourceSettings] Source settings <code>source_id</code> Optional[NotebookSourceId] Source ID <code>extra</code> dict Additional fields"},{"location":"python/api-reference/#audiooverviewresponse","title":"AudioOverviewResponse","text":"<p>Response from creating or getting an audio overview.</p>"},{"location":"python/api-reference/#attributes_6","title":"Attributes","text":"Attribute Type Description <code>audio_overview_id</code> Optional[str] Audio overview identifier <code>name</code> Optional[str] Full resource name <code>status</code> Optional[str] Processing status <code>generation_options</code> Any Generation options <code>extra</code> dict Additional API response fields"},{"location":"python/api-reference/#response-objects","title":"Response Objects","text":""},{"location":"python/api-reference/#listrecentlyviewedresponse","title":"ListRecentlyViewedResponse","text":"<p>Response from listing notebooks.</p>"},{"location":"python/api-reference/#attributes_7","title":"Attributes","text":"Attribute Type Description <code>notebooks</code> List[dict] List of notebook data <code>extra</code> dict Additional API response fields"},{"location":"python/api-reference/#batchcreatesourcesresponse","title":"BatchCreateSourcesResponse","text":"<p>Response from adding sources.</p>"},{"location":"python/api-reference/#attributes_8","title":"Attributes","text":"Attribute Type Description <code>sources</code> List[dict] List of created sources <code>extra</code> dict Additional API response fields"},{"location":"python/api-reference/#batchdeletenotebooksresponse","title":"BatchDeleteNotebooksResponse","text":"<p>Response from deleting notebooks.</p>"},{"location":"python/api-reference/#attributes_9","title":"Attributes","text":"Attribute Type Description <code>extra</code> dict Additional API response fields"},{"location":"python/api-reference/#batchdeletesourcesresponse","title":"BatchDeleteSourcesResponse","text":"<p>Response from deleting sources.</p>"},{"location":"python/api-reference/#attributes_10","title":"Attributes","text":"Attribute Type Description <code>extra</code> dict Additional API response fields"},{"location":"python/api-reference/#uploadsourcefileresponse","title":"UploadSourceFileResponse","text":"<p>Response from uploading a file.</p>"},{"location":"python/api-reference/#attributes_11","title":"Attributes","text":"Attribute Type Description <code>source_id</code> Optional[str] Created source ID <code>extra</code> dict Additional fields"},{"location":"python/api-reference/#exceptions","title":"Exceptions","text":""},{"location":"python/api-reference/#nblmerror","title":"NblmError","text":"<p>Base exception for all nblm errors.</p> <pre><code>from nblm import NblmError\n\ntry:\n    notebook = client.create_notebook(title=\"Test\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n</code></pre> <p>See Error Handling for detailed exception handling patterns.</p>"},{"location":"python/api-reference/#type-hints","title":"Type Hints","text":"<p>All classes and methods include complete type hints for IDE support:</p> <pre><code>from nblm import (\n    NblmClient,\n    Notebook,\n    NotebookSource,\n    ListRecentlyViewedResponse,\n    BatchCreateSourcesResponse,\n    WebSource,\n    TextSource,\n    VideoSource,\n    AudioOverviewRequest,\n    AudioOverviewResponse,\n)\n\n# Type checking with mypy\ndef create_and_populate(client: NblmClient, title: str) -&gt; Notebook:\n    notebook: Notebook = client.create_notebook(title=title)\n    response: BatchCreateSourcesResponse = client.add_sources(\n        notebook_id=notebook.notebook_id,\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\n    return notebook\n</code></pre>"},{"location":"python/api-reference/#next-steps","title":"Next Steps","text":"<ul> <li>Quickstart - Get started quickly</li> <li>Notebooks API - Notebook operations guide</li> <li>Sources API - Source operations guide</li> <li>Error Handling - Exception handling</li> </ul>"},{"location":"python/audio/","title":"Audio API","text":"<p>Create and manage audio overviews (podcast-style discussions) for notebooks.</p>"},{"location":"python/audio/#creating-audio-overviews","title":"Creating Audio Overviews","text":""},{"location":"python/audio/#basic-creation","title":"Basic Creation","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, AudioOverviewRequest\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Create audio overview\naudio = client.create_audio_overview(\n    notebook_id=\"abc123\",\n    request=AudioOverviewRequest()\n)\n\nprint(f\"Audio overview ID: {audio.audio_overview_id}\")\nprint(f\"Name: {audio.name}\")\nprint(f\"Status: {audio.status}\")\n</code></pre>"},{"location":"python/audio/#without-request-object","title":"Without Request Object","text":"<p>The request parameter is optional and defaults to an empty request:</p> <pre><code># Simplified version\naudio = client.create_audio_overview(notebook_id=\"abc123\")\n</code></pre>"},{"location":"python/audio/#response-attributes","title":"Response Attributes","text":"<pre><code>audio = client.create_audio_overview(notebook_id=\"abc123\")\n\n# Available attributes\nprint(f\"ID: {audio.audio_overview_id}\")\nprint(f\"Full name: {audio.name}\")\nprint(f\"Status: {audio.status}\")\nprint(f\"Generation options: {audio.generation_options}\")\nprint(f\"Extra fields: {audio.extra}\")\n</code></pre>"},{"location":"python/audio/#deleting-audio-overviews","title":"Deleting Audio Overviews","text":""},{"location":"python/audio/#basic-deletion","title":"Basic Deletion","text":"<pre><code>client.delete_audio_overview(notebook_id=\"abc123\")\n</code></pre>"},{"location":"python/audio/#with-error-handling","title":"With Error Handling","text":"<pre><code>from nblm import NblmError\n\ntry:\n    client.delete_audio_overview(notebook_id=\"abc123\")\n    print(\"Audio overview deleted successfully\")\nexcept NblmError as e:\n    print(f\"Failed to delete audio overview: {e}\")\n</code></pre>"},{"location":"python/audio/#common-patterns","title":"Common Patterns","text":""},{"location":"python/audio/#create-notebook-with-audio","title":"Create Notebook with Audio","text":"<p>Complete workflow from creating a notebook to generating audio:</p> <pre><code>from nblm import (\n    NblmClient,\n    GcloudTokenProvider,\n    WebSource,\n    AudioOverviewRequest\n)\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# 1. Create notebook\nnotebook = client.create_notebook(title=\"Tutorial Analysis\")\nnotebook_id = notebook.notebook_id\n\n# 2. Add sources\nclient.add_sources(\n    notebook_id=notebook_id,\n    web_sources=[\n        WebSource(url=\"https://example.com/tutorial-1\"),\n        WebSource(url=\"https://example.com/tutorial-2\")\n    ]\n)\n\n# 3. Create audio overview\naudio = client.create_audio_overview(\n    notebook_id=notebook_id,\n    request=AudioOverviewRequest()\n)\n\nprint(f\"Audio overview created: {audio.audio_overview_id}\")\nprint(f\"Status: {audio.status}\")\nprint(\"Check NotebookLM web UI for completion status\")\n</code></pre>"},{"location":"python/audio/#recreate-audio-overview","title":"Recreate Audio Overview","text":"<pre><code>notebook_id = \"abc123\"\n\n# Delete existing audio\ntry:\n    client.delete_audio_overview(notebook_id=notebook_id)\n    print(\"Deleted existing audio overview\")\nexcept NblmError:\n    print(\"No existing audio overview\")\n\n# Create new audio\naudio = client.create_audio_overview(notebook_id=notebook_id)\nprint(f\"Created new audio overview: {audio.status}\")\n</code></pre>"},{"location":"python/audio/#batch-create-audio-overviews","title":"Batch Create Audio Overviews","text":"<pre><code>from nblm import NblmError\n\nnotebook_ids = [\"abc123\", \"def456\", \"ghi789\"]\ncreated = []\nfailed = []\n\nfor notebook_id in notebook_ids:\n    try:\n        audio = client.create_audio_overview(notebook_id=notebook_id)\n        created.append(notebook_id)\n        print(f\"Created audio for {notebook_id}: {audio.status}\")\n    except NblmError as e:\n        failed.append(notebook_id)\n        print(f\"Failed for {notebook_id}: {e}\")\n\nprint(f\"\\nSummary: {len(created)} succeeded, {len(failed)} failed\")\n</code></pre>"},{"location":"python/audio/#audio-overview-status","title":"Audio Overview Status","text":"<p>Status Checking Limitation</p> <p>As of now, there is no API to retrieve audio overview status. You must check the NotebookLM web UI in your browser to see when audio generation is complete or if it has failed.</p>"},{"location":"python/audio/#status-values","title":"Status Values","text":"<p>When creating an audio overview, the initial status is:</p> Status Description <code>AUDIO_OVERVIEW_STATUS_IN_PROGRESS</code> Audio is being generated"},{"location":"python/audio/#checking-status","title":"Checking Status","text":"<pre><code>audio = client.create_audio_overview(notebook_id=\"abc123\")\n\nprint(f\"Status: {audio.status}\")\n# Output: Status: AUDIO_OVERVIEW_STATUS_IN_PROGRESS\nprint(\"Audio generation in progress...\")\nprint(\"Check NotebookLM web UI for completion\")\nprint(f\"URL: https://notebooklm.google.com/notebook/{notebook_id}\")\n</code></pre> <p>Status Values</p> <p>The API only returns <code>AUDIO_OVERVIEW_STATUS_IN_PROGRESS</code> upon creation. Status values like <code>AUDIO_OVERVIEW_STATUS_COMPLETED</code> or <code>AUDIO_OVERVIEW_STATUS_FAILED</code> cannot be obtained via the API and must be checked in the browser.</p>"},{"location":"python/audio/#error-handling","title":"Error Handling","text":""},{"location":"python/audio/#common-errors","title":"Common Errors","text":"<p>Notebook has no sources:</p> <pre><code>from nblm import NblmError\n\ntry:\n    # Empty notebook\n    audio = client.create_audio_overview(notebook_id=\"empty_notebook\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n    # \"Notebook must have at least one source\"\n</code></pre> <p>Audio already exists:</p> <pre><code>try:\n    audio = client.create_audio_overview(notebook_id=\"abc123\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n    # \"Audio overview already exists\"\n    # Solution: Delete existing audio first\n</code></pre> <p>Notebook not found:</p> <pre><code>try:\n    audio = client.create_audio_overview(notebook_id=\"nonexistent\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n    # \"Notebook not found\"\n</code></pre> <p>Audio not found when deleting:</p> <pre><code>try:\n    client.delete_audio_overview(notebook_id=\"abc123\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n    # \"Audio overview not found\"\n</code></pre>"},{"location":"python/audio/#api-limitations","title":"API Limitations","text":"<p>As of 2025-10-25, the audio overview API has the following limitations:</p>"},{"location":"python/audio/#configuration-not-supported","title":"Configuration Not Supported","text":"<p>The API documentation mentions configuration fields like:</p> <ul> <li><code>languageCode</code> - Audio language</li> <li><code>sourceIds</code> - Specific sources to include</li> <li><code>episodeFocus</code> - Topic focus</li> </ul> <p>However, these are not actually supported. The API only accepts an empty request:</p> <pre><code># This is all you can do\nrequest = AudioOverviewRequest()\naudio = client.create_audio_overview(notebook_id=\"abc123\", request=request)\n\n# Or simply\naudio = client.create_audio_overview(notebook_id=\"abc123\")\n</code></pre> <p>Language and other settings must be configured through the NotebookLM web UI.</p>"},{"location":"python/audio/#no-status-polling","title":"No Status Polling","text":"<p>There is no API method to check audio generation progress:</p> <pre><code># This does NOT exist\n# status = client.get_audio_overview_status(notebook_id=\"abc123\")  # Not available\n\n# You must check the web UI for status\n</code></pre>"},{"location":"python/audio/#one-audio-per-notebook","title":"One Audio Per Notebook","text":"<p>Only one audio overview can exist per notebook:</p> <pre><code># First call succeeds\naudio1 = client.create_audio_overview(notebook_id=\"abc123\")\n\n# Second call fails (audio already exists)\ntry:\n    audio2 = client.create_audio_overview(notebook_id=\"abc123\")\nexcept NblmError as e:\n    print(\"Must delete existing audio first\")\n</code></pre>"},{"location":"python/audio/#best-practices","title":"Best Practices","text":""},{"location":"python/audio/#always-check-for-sources","title":"Always Check for Sources","text":"<pre><code>from nblm import WebSource\n\ndef create_audio_safely(client: NblmClient, notebook_id: str):\n    # Ensure notebook has sources\n    client.add_sources(\n        notebook_id=notebook_id,\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\n\n    # Then create audio\n    audio = client.create_audio_overview(notebook_id=notebook_id)\n    return audio\n</code></pre>"},{"location":"python/audio/#handle-existing-audio","title":"Handle Existing Audio","text":"<pre><code>def recreate_audio(client: NblmClient, notebook_id: str):\n    # Try to delete existing audio (ignore if doesn't exist)\n    try:\n        client.delete_audio_overview(notebook_id=notebook_id)\n    except NblmError:\n        pass\n\n    # Create new audio\n    audio = client.create_audio_overview(notebook_id=notebook_id)\n    return audio\n</code></pre>"},{"location":"python/audio/#next-steps","title":"Next Steps","text":"<ul> <li>Notebooks API - Create and manage notebooks</li> <li>Sources API - Add sources before creating audio</li> <li>API Reference - Complete API reference</li> <li>Error Handling - Exception handling patterns</li> </ul>"},{"location":"python/error-handling/","title":"Error Handling","text":"<p>Exception handling patterns for the NotebookLM Python SDK.</p>"},{"location":"python/error-handling/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>from nblm import NblmError\n\n# NblmError is the base exception for all SDK errors\ntry:\n    notebook = client.create_notebook(title=\"Test\")\nexcept NblmError as e:\n    print(f\"Error: {e}\")\n</code></pre> <p>All errors raised by the SDK are instances of <code>NblmError</code>.</p>"},{"location":"python/error-handling/#basic-error-handling","title":"Basic Error Handling","text":""},{"location":"python/error-handling/#try-except-pattern","title":"Try-Except Pattern","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, NblmError\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\ntry:\n    notebook = client.create_notebook(title=\"My Notebook\")\n    print(f\"Success: {notebook.notebook_id}\")\nexcept NblmError as e:\n    print(f\"Failed: {e}\")\n</code></pre>"},{"location":"python/error-handling/#multiple-operations","title":"Multiple Operations","text":"<pre><code>from nblm import WebSource\n\ntry:\n    # Create notebook\n    notebook = client.create_notebook(title=\"Research\")\n\n    # Add sources\n    client.add_sources(\n        notebook_id=notebook.notebook_id,\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\n\n    # Create audio\n    audio = client.create_audio_overview(notebook_id=notebook.notebook_id)\n\n    print(\"All operations succeeded\")\n\nexcept NblmError as e:\n    print(f\"Operation failed: {e}\")\n    # Cleanup or retry logic here\n</code></pre>"},{"location":"python/error-handling/#error-categories","title":"Error Categories","text":""},{"location":"python/error-handling/#authentication-errors","title":"Authentication Errors","text":"<pre><code>try:\n    client = NblmClient(\n        token_provider=GcloudTokenProvider(),\n        project_number=\"123456789012\"\n    )\n    notebook = client.create_notebook(title=\"Test\")\n\nexcept NblmError as e:\n    error_msg = str(e).lower()\n    if \"auth\" in error_msg or \"permission\" in error_msg:\n        print(\"Authentication error:\")\n        print(\"  1. Run: gcloud auth login\")\n        print(\"  2. Verify project access\")\n    else:\n        print(f\"Other error: {e}\")\n</code></pre>"},{"location":"python/error-handling/#validation-errors","title":"Validation Errors","text":"<pre><code>from nblm import TextSource\n\ntry:\n    # Empty text validation\n    client.add_sources(\n        notebook_id=\"abc123\",\n        text_sources=[TextSource(content=\"\", name=\"Empty\")]\n    )\nexcept NblmError as e:\n    if \"empty\" in str(e).lower():\n        print(\"Validation error: Content cannot be empty\")\n    else:\n        print(f\"Error: {e}\")\n</code></pre>"},{"location":"python/error-handling/#api-errors","title":"API Errors","text":"<pre><code>try:\n    client.delete_notebooks([\"projects/.../notebooks/nonexistent\"])\nexcept NblmError as e:\n    if \"not found\" in str(e).lower():\n        print(\"Resource not found\")\n    elif \"403\" in str(e) or \"forbidden\" in str(e).lower():\n        print(\"Permission denied\")\n    elif \"500\" in str(e):\n        print(\"Server error - may be transient, try again\")\n    else:\n        print(f\"API error: {e}\")\n</code></pre>"},{"location":"python/error-handling/#retry-patterns","title":"Retry Patterns","text":""},{"location":"python/error-handling/#simple-retry","title":"Simple Retry","text":"<pre><code>import time\nfrom nblm import NblmError\n\ndef create_notebook_with_retry(\n    client: NblmClient,\n    title: str,\n    max_retries: int = 3\n):\n    for attempt in range(max_retries):\n        try:\n            return client.create_notebook(title)\n        except NblmError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt  # Exponential backoff\n                print(f\"Attempt {attempt + 1} failed, retrying in {wait_time}s...\")\n                time.sleep(wait_time)\n            else:\n                raise\n\n# Usage\nnotebook = create_notebook_with_retry(client, \"My Notebook\")\n</code></pre>"},{"location":"python/error-handling/#exponential-backoff","title":"Exponential Backoff","text":"<pre><code>import time\nfrom typing import TypeVar, Callable\nfrom nblm import NblmError\n\nT = TypeVar('T')\n\ndef retry_with_backoff(\n    func: Callable[[], T],\n    max_retries: int = 3,\n    base_delay: float = 1.0\n) -&gt; T:\n    \"\"\"Execute function with exponential backoff retry.\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except NblmError as e:\n            if attempt &lt; max_retries - 1:\n                delay = base_delay * (2 ** attempt)\n                print(f\"Retry {attempt + 1}/{max_retries} after {delay}s...\")\n                time.sleep(delay)\n            else:\n                raise\n\n# Usage\nnotebook = retry_with_backoff(\n    lambda: client.create_notebook(title=\"My Notebook\"),\n    max_retries=3\n)\n</code></pre>"},{"location":"python/error-handling/#graceful-degradation","title":"Graceful Degradation","text":""},{"location":"python/error-handling/#fallback-values","title":"Fallback Values","text":"<pre><code>from nblm import NblmError\n\ndef get_notebook_count(client: NblmClient) -&gt; int:\n    \"\"\"Get notebook count, return 0 on error.\"\"\"\n    try:\n        response = client.list_recently_viewed()\n        return len(response.notebooks)\n    except NblmError as e:\n        print(f\"Warning: Failed to get notebooks: {e}\")\n        return 0\n\ncount = get_notebook_count(client)\nprint(f\"Notebooks: {count}\")\n</code></pre>"},{"location":"python/error-handling/#partial-success-handling","title":"Partial Success Handling","text":"<pre><code>from nblm import WebSource, NblmError\n\ndef add_sources_with_partial_success(\n    client: NblmClient,\n    notebook_id: str,\n    urls: list[str]\n):\n    \"\"\"Add sources one by one, continue on errors.\"\"\"\n    succeeded = []\n    failed = []\n\n    for url in urls:\n        try:\n            response = client.add_sources(\n                notebook_id=notebook_id,\n                web_sources=[WebSource(url=url)]\n            )\n            succeeded.append(url)\n        except NblmError as e:\n            failed.append((url, str(e)))\n            print(f\"Failed to add {url}: {e}\")\n\n    return succeeded, failed\n\n# Usage\nurls = [\"https://example.com\", \"https://invalid\", \"https://example.org\"]\nsucceeded, failed = add_sources_with_partial_success(client, \"abc123\", urls)\n\nprint(f\"Succeeded: {len(succeeded)}\")\nprint(f\"Failed: {len(failed)}\")\n</code></pre>"},{"location":"python/error-handling/#logging","title":"Logging","text":""},{"location":"python/error-handling/#basic-logging","title":"Basic Logging","text":"<pre><code>import logging\nfrom nblm import NblmClient, GcloudTokenProvider, NblmError\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\ntry:\n    logger.info(\"Creating notebook...\")\n    notebook = client.create_notebook(title=\"Test Notebook\")\n    logger.info(f\"Created notebook: {notebook.notebook_id}\")\n\nexcept NblmError as e:\n    logger.error(f\"Failed to create notebook: {e}\", exc_info=True)\n    raise\n</code></pre>"},{"location":"python/error-handling/#structured-logging","title":"Structured Logging","text":"<pre><code>import json\nimport logging\nfrom nblm import NblmError\n\nlogger = logging.getLogger(__name__)\n\ndef log_error(operation: str, error: NblmError, **context):\n    \"\"\"Log error with structured context.\"\"\"\n    log_data = {\n        \"operation\": operation,\n        \"error\": str(error),\n        \"context\": context\n    }\n    logger.error(json.dumps(log_data))\n\n# Usage\ntry:\n    client.create_notebook(title=\"Test\")\nexcept NblmError as e:\n    log_error(\"create_notebook\", e, title=\"Test\", project=\"123456789012\")\n</code></pre>"},{"location":"python/error-handling/#type-checking","title":"Type Checking","text":""},{"location":"python/error-handling/#using-type-hints","title":"Using Type Hints","text":"<pre><code>from typing import Optional\nfrom nblm import NblmClient, Notebook, NblmError\n\ndef create_notebook_safe(\n    client: NblmClient,\n    title: str\n) -&gt; Optional[Notebook]:\n    \"\"\"Create notebook, return None on error.\"\"\"\n    try:\n        return client.create_notebook(title)\n    except NblmError as e:\n        print(f\"Error: {e}\")\n        return None\n\n# Usage with type checking\nnotebook = create_notebook_safe(client, \"Test\")\nif notebook is not None:\n    print(f\"Created: {notebook.notebook_id}\")\nelse:\n    print(\"Failed to create notebook\")\n</code></pre>"},{"location":"python/error-handling/#result-types","title":"Result Types","text":"<pre><code>from typing import Union\nfrom dataclasses import dataclass\nfrom nblm import Notebook, NblmError\n\n@dataclass\nclass Success:\n    notebook: Notebook\n\n@dataclass\nclass Failure:\n    error: str\n\nResult = Union[Success, Failure]\n\ndef create_notebook_result(\n    client: NblmClient,\n    title: str\n) -&gt; Result:\n    \"\"\"Create notebook and return typed result.\"\"\"\n    try:\n        notebook = client.create_notebook(title)\n        return Success(notebook=notebook)\n    except NblmError as e:\n        return Failure(error=str(e))\n\n# Usage\nresult = create_notebook_result(client, \"Test\")\nmatch result:\n    case Success(notebook):\n        print(f\"Created: {notebook.notebook_id}\")\n    case Failure(error):\n        print(f\"Failed: {error}\")\n</code></pre>"},{"location":"python/error-handling/#cleanup-patterns","title":"Cleanup Patterns","text":""},{"location":"python/error-handling/#automatic-cleanup","title":"Automatic Cleanup","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, WebSource\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\nnotebook = None\ntry:\n    # Create resources\n    notebook = client.create_notebook(title=\"Temporary\")\n\n    # Use resources\n    client.add_sources(\n        notebook_id=notebook.notebook_id,\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\n\n    # Process...\n\nexcept Exception as e:\n    print(f\"Error during processing: {e}\")\n    raise\nfinally:\n    # Always cleanup\n    if notebook is not None:\n        try:\n            client.delete_notebooks([notebook.name])\n            print(\"Cleanup successful\")\n        except NblmError as cleanup_error:\n            print(f\"Cleanup failed: {cleanup_error}\")\n</code></pre>"},{"location":"python/error-handling/#resource-manager","title":"Resource Manager","text":"<pre><code>from typing import Optional\nfrom contextlib import contextmanager\n\nclass NotebookManager:\n    def __init__(self, client: NblmClient):\n        self.client = client\n        self.notebooks: list[str] = []\n\n    def create(self, title: str) -&gt; Notebook:\n        \"\"\"Create and track notebook.\"\"\"\n        notebook = self.client.create_notebook(title)\n        self.notebooks.append(notebook.name)\n        return notebook\n\n    def cleanup(self):\n        \"\"\"Delete all tracked notebooks.\"\"\"\n        if self.notebooks:\n            try:\n                self.client.delete_notebooks(self.notebooks)\n                print(f\"Cleaned up {len(self.notebooks)} notebooks\")\n                self.notebooks.clear()\n            except NblmError as e:\n                print(f\"Cleanup error: {e}\")\n\n# Usage\nmanager = NotebookManager(client)\ntry:\n    nb1 = manager.create(\"Notebook 1\")\n    nb2 = manager.create(\"Notebook 2\")\n    # Do work...\nfinally:\n    manager.cleanup()\n</code></pre>"},{"location":"python/error-handling/#debugging","title":"Debugging","text":""},{"location":"python/error-handling/#enable-debug-output","title":"Enable Debug Output","text":"<pre><code>import logging\n\n# Enable debug logging for troubleshooting\nlogging.basicConfig(level=logging.DEBUG)\n\n# Your code here\nclient = NblmClient(...)\n</code></pre>"},{"location":"python/error-handling/#inspect-error-details","title":"Inspect Error Details","text":"<pre><code>from nblm import NblmError\n\ntry:\n    client.create_notebook(title=\"Test\")\nexcept NblmError as e:\n    print(f\"Error type: {type(e)}\")\n    print(f\"Error message: {str(e)}\")\n    print(f\"Error repr: {repr(e)}\")\n</code></pre>"},{"location":"python/error-handling/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Notebooks API - Notebook operations</li> <li>Sources API - Source operations</li> <li>Audio API - Audio overview operations</li> </ul>"},{"location":"python/notebooks/","title":"Notebooks API","text":"<p>Detailed guide for notebook operations in the Python SDK.</p>"},{"location":"python/notebooks/#creating-notebooks","title":"Creating Notebooks","text":""},{"location":"python/notebooks/#basic-creation","title":"Basic Creation","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\nnotebook = client.create_notebook(title=\"My Research Notebook\")\n</code></pre>"},{"location":"python/notebooks/#accessing-notebook-information","title":"Accessing Notebook Information","text":"<pre><code>notebook = client.create_notebook(title=\"Test Notebook\")\n\nprint(f\"Title: {notebook.title}\")\nprint(f\"Notebook ID: {notebook.notebook_id}\")\nprint(f\"Full name: {notebook.name}\")\nprint(f\"Created: {notebook.create_time}\")\nprint(f\"Updated: {notebook.update_time}\")\n</code></pre>"},{"location":"python/notebooks/#error-handling","title":"Error Handling","text":"<pre><code>from nblm import NblmError\n\ntry:\n    notebook = client.create_notebook(title=\"My Notebook\")\nexcept NblmError as e:\n    print(f\"Failed to create notebook: {e}\")\n</code></pre>"},{"location":"python/notebooks/#listing-notebooks","title":"Listing Notebooks","text":""},{"location":"python/notebooks/#list-all-recent-notebooks","title":"List All Recent Notebooks","text":"<pre><code>response = client.list_recently_viewed()\n\nfor notebook_data in response.notebooks:\n    print(f\"Title: {notebook_data.get('title')}\")\n    print(f\"ID: {notebook_data.get('notebookId')}\")\n    print(f\"Updated: {notebook_data.get('updateTime')}\")\n    print(\"---\")\n</code></pre>"},{"location":"python/notebooks/#limit-results","title":"Limit Results","text":"<pre><code># Get only 10 most recent notebooks\nresponse = client.list_recently_viewed(page_size=10)\n</code></pre>"},{"location":"python/notebooks/#response-structure","title":"Response Structure","text":"<pre><code>response = client.list_recently_viewed()\n\n# response.notebooks is a list of dictionaries\nfor notebook_data in response.notebooks:\n    # Each notebook_data is a dictionary with these keys:\n    # - title: str\n    # - notebookId: str\n    # - name: str (full resource name)\n    # - createTime: str\n    # - updateTime: str\n    pass\n</code></pre> <p>API Limitations</p> <ul> <li>Notebooks are sorted by most recently updated first</li> <li>The <code>page_size</code> parameter is accepted but pagination is not implemented by the API (as of 2025-10-25)</li> <li>All notebooks are returned regardless of the <code>page_size</code> value</li> </ul>"},{"location":"python/notebooks/#deleting-notebooks","title":"Deleting Notebooks","text":""},{"location":"python/notebooks/#delete-single-notebook","title":"Delete Single Notebook","text":"<pre><code>notebook_name = \"projects/123456789012/locations/global/notebooks/abc123\"\nclient.delete_notebooks([notebook_name])\n</code></pre>"},{"location":"python/notebooks/#delete-multiple-notebooks","title":"Delete Multiple Notebooks","text":"<pre><code>notebook_names = [\n    \"projects/123456789012/locations/global/notebooks/abc123\",\n    \"projects/123456789012/locations/global/notebooks/def456\",\n    \"projects/123456789012/locations/global/notebooks/ghi789\"\n]\n\nresponse = client.delete_notebooks(notebook_names)\n</code></pre>"},{"location":"python/notebooks/#get-notebook-name-from-response","title":"Get Notebook Name from Response","text":"<pre><code># Create a notebook\nnotebook = client.create_notebook(title=\"Temporary Notebook\")\n\n# Use the full name for deletion\nclient.delete_notebooks([notebook.name])\n</code></pre> <p>Deletion Limitations</p> <ul> <li>Important: Despite the API being named \"batchDelete\", it only accepts one notebook at a time (as of 2025-10-25)</li> <li>The SDK handles this limitation by calling the API sequentially for each notebook</li> <li>Deletion is permanent and cannot be undone</li> <li>All sources and content within the notebook are also deleted</li> </ul>"},{"location":"python/notebooks/#common-patterns","title":"Common Patterns","text":""},{"location":"python/notebooks/#create-use-and-clean-up","title":"Create, Use, and Clean Up","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, WebSource\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Create notebook\nnotebook = client.create_notebook(title=\"Temporary Analysis\")\nnotebook_id = notebook.notebook_id\n\ntry:\n    # Use the notebook\n    client.add_sources(\n        notebook_id=notebook_id,\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\n\n    # Do analysis...\n\nfinally:\n    # Clean up\n    client.delete_notebooks([notebook.name])\n</code></pre>"},{"location":"python/notebooks/#filter-and-process-notebooks","title":"Filter and Process Notebooks","text":"<pre><code>response = client.list_recently_viewed()\n\n# Filter notebooks by title\nresearch_notebooks = [\n    nb for nb in response.notebooks\n    if \"research\" in nb.get(\"title\", \"\").lower()\n]\n\nprint(f\"Found {len(research_notebooks)} research notebooks\")\n</code></pre>"},{"location":"python/notebooks/#batch-create","title":"Batch Create","text":"<pre><code>titles = [\"Project A\", \"Project B\", \"Project C\"]\ncreated_notebooks = []\n\nfor title in titles:\n    notebook = client.create_notebook(title=title)\n    created_notebooks.append(notebook)\n    print(f\"Created: {notebook.notebook_id}\")\n</code></pre>"},{"location":"python/notebooks/#delete-old-notebooks","title":"Delete Old Notebooks","text":"<pre><code>from datetime import datetime, timedelta\n\nresponse = client.list_recently_viewed()\n\n# Calculate cutoff date (30 days ago)\ncutoff = datetime.now() - timedelta(days=30)\n\nold_notebooks = []\nfor nb_data in response.notebooks:\n    update_time = datetime.fromisoformat(nb_data[\"updateTime\"].replace(\"Z\", \"+00:00\"))\n    if update_time &lt; cutoff:\n        old_notebooks.append(nb_data[\"name\"])\n\nif old_notebooks:\n    print(f\"Deleting {len(old_notebooks)} old notebooks...\")\n    client.delete_notebooks(old_notebooks)\n</code></pre>"},{"location":"python/notebooks/#error-handling_1","title":"Error Handling","text":""},{"location":"python/notebooks/#common-errors","title":"Common Errors","text":"<p>Authentication failure:</p> <pre><code>from nblm import NblmError\n\ntry:\n    notebook = client.create_notebook(title=\"Test\")\nexcept NblmError as e:\n    if \"authentication\" in str(e).lower():\n        print(\"Authentication failed. Check your credentials.\")\n    else:\n        print(f\"Error: {e}\")\n</code></pre> <p>Notebook not found:</p> <pre><code>try:\n    client.delete_notebooks([\"projects/.../notebooks/nonexistent\"])\nexcept NblmError as e:\n    print(f\"Notebook not found: {e}\")\n</code></pre> <p>Permission denied:</p> <pre><code>try:\n    client.delete_notebooks([\"projects/.../notebooks/abc123\"])\nexcept NblmError as e:\n    if \"permission\" in str(e).lower():\n        print(\"You don't have permission to delete this notebook\")\n</code></pre>"},{"location":"python/notebooks/#best-practices","title":"Best Practices","text":""},{"location":"python/notebooks/#save-notebook-ids","title":"Save Notebook IDs","text":"<pre><code># Save for later use\nnotebook = client.create_notebook(title=\"Important Notebook\")\n\n# Store the ID\nnotebook_id = notebook.notebook_id\nwith open(\"notebook_id.txt\", \"w\") as f:\n    f.write(notebook_id)\n\n# Use later\nwith open(\"notebook_id.txt\", \"r\") as f:\n    saved_id = f.read().strip()\n\nclient.add_sources(\n    notebook_id=saved_id,\n    web_sources=[WebSource(url=\"https://example.com\")]\n)\n</code></pre>"},{"location":"python/notebooks/#validate-before-operations","title":"Validate Before Operations","text":"<pre><code>def create_notebook_safely(client: NblmClient, title: str) -&gt; Optional[Notebook]:\n    if not title or not title.strip():\n        print(\"Error: Title cannot be empty\")\n        return None\n\n    try:\n        return client.create_notebook(title=title)\n    except NblmError as e:\n        print(f\"Failed to create notebook: {e}\")\n        return None\n</code></pre>"},{"location":"python/notebooks/#use-context-managers","title":"Use Context Managers","text":"<pre><code>from contextlib import contextmanager\nfrom typing import Generator\n\n@contextmanager\ndef temporary_notebook(\n    client: NblmClient,\n    title: str\n) -&gt; Generator[Notebook, None, None]:\n    \"\"\"Create a notebook and automatically delete it when done.\"\"\"\n    notebook = client.create_notebook(title=title)\n    try:\n        yield notebook\n    finally:\n        client.delete_notebooks([notebook.name])\n\n# Usage\nwith temporary_notebook(client, \"Temp Analysis\") as notebook:\n    client.add_sources(\n        notebook_id=notebook.notebook_id,\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\n    # Notebook is automatically deleted after this block\n</code></pre>"},{"location":"python/notebooks/#next-steps","title":"Next Steps","text":"<ul> <li>Sources API - Add and manage sources</li> <li>Audio API - Create audio overviews</li> <li>API Reference - Complete API reference</li> <li>Error Handling - Exception handling patterns</li> </ul>"},{"location":"python/quickstart/","title":"Python SDK Quickstart","text":"<p>Get started with the NotebookLM Python SDK in 5 minutes.</p>"},{"location":"python/quickstart/#installation","title":"Installation","text":"<pre><code>pip install nblm\n</code></pre>"},{"location":"python/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.14 or later</li> <li>Google Cloud project with NotebookLM API enabled</li> <li>gcloud CLI installed and authenticated</li> </ul>"},{"location":"python/quickstart/#basic-setup","title":"Basic Setup","text":""},{"location":"python/quickstart/#1-authenticate-with-gcloud","title":"1. Authenticate with gcloud","text":"<pre><code>gcloud auth login\n</code></pre>"},{"location":"python/quickstart/#2-get-your-project-number","title":"2. Get your project number","text":"<pre><code>gcloud projects describe YOUR_PROJECT_ID --format=\"value(projectNumber)\"\n</code></pre> <p>Example output: <code>123456789012</code></p>"},{"location":"python/quickstart/#3-create-your-first-notebook","title":"3. Create your first notebook","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\n# Initialize client\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Create a notebook\nnotebook = client.create_notebook(title=\"My First Notebook\")\nprint(f\"Created: {notebook.title}\")\nprint(f\"Notebook ID: {notebook.notebook_id}\")\n</code></pre>"},{"location":"python/quickstart/#complete-example","title":"Complete Example","text":"<p>Here's a complete workflow from creating a notebook to generating an audio overview:</p> <pre><code>from nblm import (\n    NblmClient,\n    GcloudTokenProvider,\n    WebSource,\n    TextSource,\n    AudioOverviewRequest\n)\n\n# 1. Initialize client\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# 2. Create a notebook\nnotebook = client.create_notebook(title=\"Python Tutorial Notebook\")\nnotebook_id = notebook.notebook_id\nprint(f\"Created notebook: {notebook_id}\")\n\n# 3. Add sources\nresponse = client.add_sources(\n    notebook_id=notebook_id,\n    web_sources=[\n        WebSource(url=\"https://docs.python.org/3/\", name=\"Python Docs\"),\n        WebSource(url=\"https://realpython.com/\")\n    ],\n    text_sources=[\n        TextSource(content=\"My learning notes\", name=\"Notes\")\n    ]\n)\nprint(f\"Added {len(response.sources)} sources\")\n\n# 4. Upload a file\nupload_response = client.upload_source_file(\n    notebook_id=notebook_id,\n    path=\"tutorial.pdf\"\n)\nprint(f\"Uploaded file: {upload_response.source_id}\")\n\n# 5. Create audio overview\naudio = client.create_audio_overview(\n    notebook_id=notebook_id,\n    request=AudioOverviewRequest()\n)\nprint(f\"Audio overview created: {audio.status}\")\n\n# 6. List your notebooks\nnotebooks = client.list_recently_viewed(page_size=10)\nprint(f\"Total notebooks: {len(notebooks.notebooks)}\")\n</code></pre>"},{"location":"python/quickstart/#authentication-options","title":"Authentication Options","text":""},{"location":"python/quickstart/#option-1-gcloud-cli-recommended","title":"Option 1: gcloud CLI (Recommended)","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n</code></pre>"},{"location":"python/quickstart/#option-2-environment-variable","title":"Option 2: Environment Variable","text":"<pre><code>import os\nfrom nblm import NblmClient, EnvTokenProvider\n\n# Set access token\nos.environ[\"NBLM_ACCESS_TOKEN\"] = \"your-access-token\"\n\nclient = NblmClient(\n    token_provider=EnvTokenProvider(),\n    project_number=\"123456789012\"\n)\n</code></pre>"},{"location":"python/quickstart/#option-3-custom-gcloud-binary-path","title":"Option 3: Custom gcloud Binary Path","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(binary=\"/custom/path/gcloud\"),\n    project_number=\"123456789012\"\n)\n</code></pre>"},{"location":"python/quickstart/#common-operations","title":"Common Operations","text":""},{"location":"python/quickstart/#create-and-populate-a-notebook","title":"Create and populate a notebook","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, WebSource\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Create\nnotebook = client.create_notebook(title=\"Research Notebook\")\n\n# Add multiple web sources\nurls = [\n    \"https://example.com/article1\",\n    \"https://example.com/article2\",\n    \"https://example.com/article3\"\n]\n\nclient.add_sources(\n    notebook_id=notebook.notebook_id,\n    web_sources=[WebSource(url=url) for url in urls]\n)\n</code></pre>"},{"location":"python/quickstart/#error-handling","title":"Error handling","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, NblmError\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\ntry:\n    notebook = client.create_notebook(title=\"Test Notebook\")\n    print(f\"Success: {notebook.notebook_id}\")\nexcept NblmError as e:\n    print(f\"Failed: {e}\")\n</code></pre>"},{"location":"python/quickstart/#configuration","title":"Configuration","text":""},{"location":"python/quickstart/#using-environment-variables","title":"Using environment variables","text":"<pre><code>import os\nfrom nblm import NblmClient, GcloudTokenProvider\n\n# Set once\nos.environ[\"NBLM_PROJECT_NUMBER\"] = \"123456789012\"\nos.environ[\"NBLM_LOCATION\"] = \"global\"\nos.environ[\"NBLM_ENDPOINT_LOCATION\"] = \"global\"\n\n# Create client (will use environment variables)\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=os.environ[\"NBLM_PROJECT_NUMBER\"]\n)\n</code></pre>"},{"location":"python/quickstart/#custom-locations","title":"Custom locations","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider\n\n# Use US location (for compliance requirements)\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\",\n    location=\"us\",\n    endpoint_location=\"us\"\n)\n</code></pre>"},{"location":"python/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Notebooks API - Detailed notebook operations</li> <li>Sources API - Detailed source operations</li> <li>Error Handling - Exception handling patterns</li> </ul>"},{"location":"python/sources/","title":"Sources API","text":"<p>Detailed guide for managing sources in notebooks with the Python SDK.</p>"},{"location":"python/sources/#adding-sources","title":"Adding Sources","text":""},{"location":"python/sources/#add-web-sources","title":"Add Web Sources","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, WebSource\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Single web source\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    web_sources=[\n        WebSource(url=\"https://example.com\", name=\"Example Website\")\n    ]\n)\n\n# Multiple web sources\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    web_sources=[\n        WebSource(url=\"https://docs.python.org\", name=\"Python Docs\"),\n        WebSource(url=\"https://realpython.com\"),  # name is optional\n        WebSource(url=\"https://peps.python.org\", name=\"Python PEPs\")\n    ]\n)\n</code></pre>"},{"location":"python/sources/#add-text-sources","title":"Add Text Sources","text":"<pre><code>from nblm import TextSource\n\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    text_sources=[\n        TextSource(content=\"Meeting notes from 2025-10-25\", name=\"Meeting Notes\"),\n        TextSource(content=\"TODO: Review API changes\", name=\"TODO\")\n    ]\n)\n</code></pre>"},{"location":"python/sources/#add-video-sources","title":"Add Video Sources","text":"<pre><code>from nblm import VideoSource\n\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    video_sources=[\n        VideoSource(url=\"https://www.youtube.com/watch?v=VIDEO_ID_1\"),\n        VideoSource(url=\"https://www.youtube.com/watch?v=VIDEO_ID_2\")\n    ]\n)\n</code></pre>"},{"location":"python/sources/#mix-multiple-source-types","title":"Mix Multiple Source Types","text":"<pre><code>from nblm import WebSource, TextSource, VideoSource\n\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    web_sources=[\n        WebSource(url=\"https://example.com\", name=\"Article\")\n    ],\n    text_sources=[\n        TextSource(content=\"Summary of key points\", name=\"Summary\")\n    ],\n    video_sources=[\n        VideoSource(url=\"https://www.youtube.com/watch?v=VIDEO_ID\")\n    ]\n)\n\nprint(f\"Added {len(response.sources)} sources\")\nfor source in response.sources:\n    print(f\"  - {source['name']}\")\n</code></pre>"},{"location":"python/sources/#validation","title":"Validation","text":"<p>The SDK validates inputs before making API calls:</p> <pre><code>from nblm import NblmError\n\n# Empty text content raises error\ntry:\n    client.add_sources(\n        notebook_id=\"abc123\",\n        text_sources=[TextSource(content=\"\", name=\"Empty\")]\n    )\nexcept NblmError as e:\n    print(f\"Validation error: {e}\")  # \"text content cannot be empty\"\n\n# No sources provided raises error\ntry:\n    client.add_sources(notebook_id=\"abc123\")\nexcept NblmError as e:\n    print(f\"Validation error: {e}\")  # \"at least one source must be provided\"\n</code></pre>"},{"location":"python/sources/#uploading-files","title":"Uploading Files","text":""},{"location":"python/sources/#basic-upload","title":"Basic Upload","text":"<pre><code>response = client.upload_source_file(\n    notebook_id=\"abc123\",\n    path=\"/path/to/document.pdf\"\n)\n\nprint(f\"Uploaded: {response.source_id}\")\n</code></pre>"},{"location":"python/sources/#with-custom-content-type","title":"With Custom Content Type","text":"<pre><code>response = client.upload_source_file(\n    notebook_id=\"abc123\",\n    path=\"/path/to/file.txt\",\n    content_type=\"text/plain\"\n)\n</code></pre>"},{"location":"python/sources/#with-display-name","title":"With Display Name","text":"<pre><code>response = client.upload_source_file(\n    notebook_id=\"abc123\",\n    path=\"/path/to/research.pdf\",\n    display_name=\"Research Paper 2025\"\n)\n</code></pre>"},{"location":"python/sources/#batch-upload","title":"Batch Upload","text":"<pre><code>from pathlib import Path\n\nfiles_dir = Path(\"/path/to/documents\")\nuploaded = []\n\nfor file_path in files_dir.glob(\"*.pdf\"):\n    response = client.upload_source_file(\n        notebook_id=\"abc123\",\n        path=str(file_path)\n    )\n    uploaded.append(response.source_id)\n    print(f\"Uploaded: {file_path.name} -&gt; {response.source_id}\")\n\nprint(f\"Total uploaded: {len(uploaded)}\")\n</code></pre>"},{"location":"python/sources/#file-validation","title":"File Validation","text":"<p>The SDK validates files before upload:</p> <pre><code>from nblm import NblmError\n\n# File not found\ntry:\n    client.upload_source_file(\n        notebook_id=\"abc123\",\n        path=\"/nonexistent/file.pdf\"\n    )\nexcept NblmError as e:\n    print(f\"Error: {e}\")  # \"file not found\"\n\n# Not a file\ntry:\n    client.upload_source_file(\n        notebook_id=\"abc123\",\n        path=\"/path/to/directory\"\n    )\nexcept NblmError as e:\n    print(f\"Error: {e}\")  # \"path is not a file\"\n\n# Empty file\ntry:\n    client.upload_source_file(\n        notebook_id=\"abc123\",\n        path=\"/path/to/empty.txt\"\n    )\nexcept NblmError as e:\n    print(f\"Error: {e}\")  # \"cannot upload empty files\"\n</code></pre>"},{"location":"python/sources/#supported-file-types","title":"Supported File Types","text":"<p>The API supports various file types including:</p> <ul> <li>PDF (.pdf)</li> <li>Text files (.txt)</li> <li>Word documents (.docx)</li> <li>And more</li> </ul> <p>Content type is auto-detected from file extension if not specified.</p>"},{"location":"python/sources/#getting-source-details","title":"Getting Source Details","text":""},{"location":"python/sources/#get-a-specific-source","title":"Get a Specific Source","text":"<pre><code>source = client.get_source(\n    notebook_id=\"abc123\",\n    source_id=\"source-1\"\n)\n\nprint(f\"Name: {source.name}\")\nprint(f\"Title: {source.title}\")\n\nif source.metadata:\n    print(f\"Word count: {source.metadata.word_count}\")\n    print(f\"Added: {source.metadata.source_added_timestamp}\")\n\nif source.settings:\n    print(f\"Status: {source.settings.status}\")\n</code></pre>"},{"location":"python/sources/#youtube-metadata","title":"YouTube Metadata","text":"<pre><code>source = client.get_source(notebook_id=\"abc123\", source_id=\"video-source-1\")\n\nif source.metadata and source.metadata.youtube_metadata:\n    yt = source.metadata.youtube_metadata\n    print(f\"Channel: {yt.channel_name}\")\n    print(f\"Video ID: {yt.video_id}\")\n</code></pre>"},{"location":"python/sources/#deleting-sources","title":"Deleting Sources","text":""},{"location":"python/sources/#delete-single-source","title":"Delete Single Source","text":"<pre><code>client.delete_sources(\n    notebook_id=\"abc123\",\n    source_names=[\n        \"projects/123456789012/locations/global/notebooks/abc123/sources/source-1\"\n    ]\n)\n</code></pre>"},{"location":"python/sources/#delete-multiple-sources","title":"Delete Multiple Sources","text":"<pre><code>source_names = [\n    \"projects/123/locations/global/notebooks/abc123/sources/source-1\",\n    \"projects/123/locations/global/notebooks/abc123/sources/source-2\",\n    \"projects/123/locations/global/notebooks/abc123/sources/source-3\"\n]\n\nclient.delete_sources(\n    notebook_id=\"abc123\",\n    source_names=source_names\n)\n</code></pre>"},{"location":"python/sources/#get-source-names-from-add-response","title":"Get Source Names from Add Response","text":"<pre><code>from nblm import WebSource\n\n# Add sources\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    web_sources=[\n        WebSource(url=\"https://example.com\"),\n        WebSource(url=\"https://example.org\")\n    ]\n)\n\n# Extract source names\nsource_names = [source[\"name\"] for source in response.sources]\n\n# Delete them\nclient.delete_sources(\n    notebook_id=\"abc123\",\n    source_names=source_names\n)\n</code></pre>"},{"location":"python/sources/#common-patterns","title":"Common Patterns","text":""},{"location":"python/sources/#create-notebook-and-add-sources","title":"Create Notebook and Add Sources","text":"<pre><code>from nblm import NblmClient, GcloudTokenProvider, WebSource, TextSource\n\nclient = NblmClient(\n    token_provider=GcloudTokenProvider(),\n    project_number=\"123456789012\"\n)\n\n# Create notebook\nnotebook = client.create_notebook(title=\"Research: Python Best Practices\")\n\n# Add initial sources\nclient.add_sources(\n    notebook_id=notebook.notebook_id,\n    web_sources=[\n        WebSource(url=\"https://peps.python.org/pep-0008/\", name=\"PEP 8\"),\n        WebSource(url=\"https://docs.python-guide.org/\", name=\"Python Guide\")\n    ],\n    text_sources=[\n        TextSource(\n            content=\"Focus on code quality and readability\",\n            name=\"Project Goals\"\n        )\n    ]\n)\n\nprint(f\"Notebook ready: {notebook.notebook_id}\")\n</code></pre>"},{"location":"python/sources/#incremental-source-addition","title":"Incremental Source Addition","text":"<pre><code>notebook_id = \"abc123\"\n\n# Add web sources first\nclient.add_sources(\n    notebook_id=notebook_id,\n    web_sources=[WebSource(url=\"https://example.com\")]\n)\n\n# Add text notes later\nclient.add_sources(\n    notebook_id=notebook_id,\n    text_sources=[TextSource(content=\"Notes\", name=\"Notes\")]\n)\n\n# Upload files separately\nclient.upload_source_file(\n    notebook_id=notebook_id,\n    path=\"document.pdf\"\n)\n</code></pre>"},{"location":"python/sources/#adding-google-drive-documents","title":"Adding Google Drive Documents","text":"<pre><code>from nblm import GoogleDriveSource\n\nnotebook_id = \"abc123\"\n\n# Authenticate with Drive-enabled credentials:\n#   gcloud auth login --enable-gdrive-access\n#   export NBLM_ACCESS_TOKEN=$(gcloud auth print-access-token)\n\nclient.add_sources(\n    notebook_id=notebook_id,\n    drive_sources=[\n        GoogleDriveSource(\n            document_id=\"FILE_ID\",\n            mime_type=\"application/vnd.google-apps.presentation\",\n            name=\"Team Update Slides\",\n        )\n    ],\n)\n</code></pre> <p>Google Drive File ID</p> <p>The authenticated account must have view access to the Drive document. Use the Drive web UI to confirm you can open the file before ingesting it. <code>FILE_ID</code> can be extracted from the Drive URL at <code>/d/&lt;ID&gt;/</code> (e.g., <code>https://drive.google.com/file/d/&lt;ID&gt;/xxx</code>).</p> <p>Drive Access Validation</p> <p>The SDK performs a token scope check (<code>drive</code> or <code>drive.file</code>) and verifies that the authenticated account can access the document. Failing either check raises an <code>NblmError</code> immediately, preventing partial uploads.</p>"},{"location":"python/sources/#bulk-upload-from-directory","title":"Bulk Upload from Directory","text":"<pre><code>from pathlib import Path\n\ndef upload_directory(client: NblmClient, notebook_id: str, directory: str):\n    \"\"\"Upload all files from a directory to a notebook.\"\"\"\n    path = Path(directory)\n    uploaded_count = 0\n\n    for file_path in path.iterdir():\n        if file_path.is_file():\n            try:\n                response = client.upload_source_file(\n                    notebook_id=notebook_id,\n                    path=str(file_path)\n                )\n                print(f\"Uploaded: {file_path.name}\")\n                uploaded_count += 1\n            except Exception as e:\n                print(f\"Failed to upload {file_path.name}: {e}\")\n\n    return uploaded_count\n\n# Usage\ncount = upload_directory(client, \"abc123\", \"/path/to/documents\")\nprint(f\"Uploaded {count} files\")\n</code></pre>"},{"location":"python/sources/#extract-source-ids","title":"Extract Source IDs","text":"<pre><code># Add sources and save IDs\nresponse = client.add_sources(\n    notebook_id=\"abc123\",\n    web_sources=[WebSource(url=\"https://example.com\")]\n)\n\n# Extract source ID from full name\n# Format: \"projects/.../notebooks/.../sources/SOURCE_ID\"\nfor source in response.sources:\n    full_name = source[\"name\"]\n    source_id = full_name.split(\"/\")[-1]\n    print(f\"Source ID: {source_id}\")\n</code></pre>"},{"location":"python/sources/#error-handling","title":"Error Handling","text":""},{"location":"python/sources/#validation-errors","title":"Validation Errors","text":"<pre><code>from nblm import NblmError\n\n# Empty text validation\ntry:\n    client.add_sources(\n        notebook_id=\"abc123\",\n        text_sources=[TextSource(content=\"   \", name=\"Empty\")]\n    )\nexcept NblmError as e:\n    print(f\"Validation failed: {e}\")\n\n# No sources provided\ntry:\n    client.add_sources(notebook_id=\"abc123\")\nexcept NblmError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"python/sources/#api-errors","title":"API Errors","text":"<pre><code># Notebook not found\ntry:\n    client.add_sources(\n        notebook_id=\"nonexistent\",\n        web_sources=[WebSource(url=\"https://example.com\")]\n    )\nexcept NblmError as e:\n    print(f\"API error: {e}\")\n\n# Invalid URL\ntry:\n    client.add_sources(\n        notebook_id=\"abc123\",\n        web_sources=[WebSource(url=\"not-a-valid-url\")]\n    )\nexcept NblmError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"python/sources/#limitations","title":"Limitations","text":"<ul> <li>Source listing: No API method to list all sources in a notebook</li> <li>Source updates: Cannot update existing sources, only add or delete</li> </ul>"},{"location":"python/sources/#next-steps","title":"Next Steps","text":"<ul> <li>Notebooks API - Create and manage notebooks</li> <li>Audio API - Create audio overviews</li> <li>API Reference - Complete API reference</li> <li>Error Handling - Exception handling</li> </ul>"},{"location":"rust/getting-started/","title":"Rust SDK \u2013 Getting Started","text":"<p>Work in Progress</p> <p>The Rust SDK is currently being refactored. A complete Getting Started guide will be added once the new core APIs are finalized.</p> <p>Stay tuned \u2014 we'll update this document soon!</p>"},{"location":"rust/getting-started/#installation","title":"Installation","text":"<p>Add the necessary dependencies to your project's Cargo.toml:</p>"},{"location":"rust/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust 1.70 or later (for modern async features)</li> <li>Google Cloud project with NotebookLM API enabled</li> <li>gcloud CLI installed and authenticated (for simple credential management)</li> </ul>"},{"location":"rust/getting-started/#basic-setup","title":"Basic Setup","text":"<ol> <li>Authenticate with gcloud</li> </ol> <ol> <li>Set Your Project Number</li> </ol> <ol> <li>Initialize and List Notebooks</li> </ol>"},{"location":"rust/getting-started/#complete-example","title":"Complete Example","text":"<p>Here's a complete workflow demonstrating typical API operations.</p> <pre><code>// 1. Initialize client\n\n// 2. Create a notebook\n\n// 3. Add sources\n\n// 4. Create audio overview\n\n// 5. List your notebooks\n\n// Optional Cleanup: Delete the created notebook\n</code></pre>"},{"location":"rust/getting-started/#authentication-options","title":"Authentication Options","text":"<ol> <li>gcloud CLI (Recommended)</li> </ol>"},{"location":"rust/getting-started/#configuration","title":"Configuration","text":"<p>Environment Variables</p>"},{"location":"rust/getting-started/#next-steps","title":"Next Steps","text":""}]}