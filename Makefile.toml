[config]
skip_core_tasks = true
default_to_workspace = false

[env]
UV_RUN_ARGS = "run;--project;python;--extra;dev;--directory;python"

[tasks.before-build]

[tasks.default]
description = "Default task"
dependencies = ["fmt", "lint", "check"]

[tasks.fmt]
description = "Apply rustfmt to all projects"
command = "cargo"
args = ["fmt", "--all"]

[tasks.fmt-ci]
description = "Verify formatting"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.lint]
description = "Verify zero clippy warnings"
command = "cargo"
args = [
    "clippy",
    "--workspace",
    "--exclude",
    "nblm-python",
    "--all-targets",
    "--all-features",
    "--",
    "-D",
    "warnings",
]

[tasks.test]
description = "Run test suite"
command = "cargo"
args = ["test", "--workspace", "--exclude", "nblm-python"]

[tasks.check]
dependencies = ["before-build"]
command = "cargo"
args = ["check", "--workspace", "--exclude", "nblm-python"]

[tasks.build]
dependencies = ["before-build"]
command = "cargo"
args = ["build", "--workspace", "--exclude", "nblm-python", "${@}"]

[tasks.clean]
dependencies = ["before-build"]
command = "cargo"
args = ["clean"]

[tasks.fetch]
dependencies = ["before-build"]
command = "cargo"
args = ["fetch"]

[tasks.coverage]
description = "Generate coverage report using cargo-llvm-cov"
dependencies = ["before-build"]
command = "cargo"
args = ["llvm-cov", "--workspace", "--all-features", "--open"]

[tasks.all]
description = "Run fmt, lint, and test together"
dependencies = ["fmt", "lint", "test"]

# ------------------------- CI -------------------------
[tasks.ci]
description = "Run CI checks (fmt, clippy, tests)"
dependencies = ["fmt-ci", "clippy-ci", "test-ci"]

[tasks.clippy-ci]
dependencies = ["before-build"]
command = "cargo"
args = [
    "clippy",
    "--locked",
    "--workspace",
    "--exclude",
    "nblm-python",
    "--all-targets",
    "--all-features",
    "--",
    "-D",
    "warnings",
]

[tasks.test-ci]
dependencies = ["before-build"]
command = "cargo"
args = [
    "test",
    "--locked",
    "--workspace",
    "--exclude",
    "nblm-python",
    "--all-targets",
]

# ------------------------- Version Management -------------------------
[tasks.bump]
description = "Bump version across all packages (Usage: ./scripts/bump-version.sh <version>)"
script_runner = "@shell"
script = '''
echo "To bump version, run:"
echo "  ./scripts/bump-version.sh <version>"
echo ""
echo "Example:"
echo "  ./scripts/bump-version.sh 0.1.1"
'''

# ------------------------- Python -------------------------
[tasks.py-fmt]
description = "Format Python code with ruff"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "ruff", "format", "src", "tests"]

[tasks.py-fmt-check]
description = "Check Python code formatting"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "ruff", "format", "--check", "src", "tests"]

[tasks.py-lint]
description = "Lint Python code with ruff"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "ruff", "check", "src", "tests"]

[tasks.py-lint-fix]
description = "Lint and fix Python code with ruff"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "ruff", "check", "--fix", "src", "tests"]

[tasks.py-type]
description = "Run mypy type checking"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "mypy", "src", "tests"]

[tasks.py-test]
description = "Run Python tests with pytest"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "pytest", "tests", "-v"]

[tasks.py-build]
description = "Build Python package with maturin"
dependencies = ["py-setup"]
command = "uv"
args = ["@@split(UV_RUN_ARGS,;)", "maturin", "develop"]

[tasks.py-all]
description = "Run all Python checks (fmt, lint, type, test)"
dependencies = ["py-fmt", "py-lint-fix", "py-type", "py-build"]

[tasks.py-setup]
private = true
condition = { files_modified = { input = ["python/pyproject.toml", "python/uv.lock"], output = ["python/.venv/timestamp.txt"] } }
cwd = "python"
command = "bash"
args = [
    "-euo",
    "pipefail",
    "-c",
    "uv venv && uv sync && touch .venv/timestamp.txt",
]
